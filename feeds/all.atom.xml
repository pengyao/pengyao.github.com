<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PengYao's Weblog</title><link href="https://pengyao.org/" rel="alternate"></link><link href="https://pengyao.org/feeds/all.atom.xml" rel="self"></link><id>https://pengyao.org/</id><updated>2015-01-27T00:00:00+08:00</updated><entry><title>Salt zmq_filtering测试</title><link href="https://pengyao.org/salt-zmq-filtering.html" rel="alternate"></link><published>2015-01-27T00:00:00+08:00</published><updated>2015-01-27T00:00:00+08:00</updated><author><name>pengyao</name></author><id>tag:pengyao.org,2015-01-27:/salt-zmq-filtering.html</id><summary type="html">&lt;p class="first last"&gt;Salt 2014.7新增了zmq_filtering配置项, 利用zeromq PUB/SUB Envelopes技术, 可以实现消息只发送到target minion(目前只支持list target)&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Salt 2014.7新增 &lt;a class="reference external" href="https://github.com/saltstack/salt/pull/13285"&gt;zmq_filtering&lt;/a&gt; 配置项, 基于zeromq PUB-SUB &lt;a class="reference external" href="http://zguide.zeromq.org/page:all#Pub-Sub-Message-Envelopes"&gt;Envelopes&lt;/a&gt; 技术,
在Master端(publisher)进行message过滤(ZeroMQ 3.0+版本,之前版本是在subscriber端进行过滤), 以实现如果该指令只是少量主机执行的话,
只将指令发送到匹配的Minion端, 而并非发送到所有的Minion端. 需要注意的是, 目前zmq_filtering只作用list target, 即使用-L来指定target.
本文将对其进行功能及效果测试.&lt;/p&gt;
&lt;div class="section" id="section-1"&gt;
&lt;h2&gt;前置阅读&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;ZeroMQ PUB-SUB Message Envelopes: &lt;a class="reference external" href="http://zguide.zeromq.org/page:all#Pub-Sub-Message-Envelopes"&gt;http://zguide.zeromq.org/page:all#Pub-Sub-Message-Envelopes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="section-2"&gt;
&lt;h2&gt;环境说明&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;OS: CentOS 6.5 X86_64&lt;/li&gt;
&lt;li&gt;Salt: Master/Minion架构, 2014.7.1版本&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="section-3"&gt;
&lt;h2&gt;开工&lt;/h2&gt;
&lt;div class="section" id="zmq-filtering"&gt;
&lt;h3&gt;配置zmq_filtering&lt;/h3&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;zmq_filtering参数在Master端及Minion端均需要配置才能生效, 默认为False&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Master端配置zmq_filtering&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;zmq_filtering: True&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/etc/salt/master
service&lt;span class="w"&gt; &lt;/span&gt;salt-master&lt;span class="w"&gt; &lt;/span&gt;restart
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Minion端配置zmq_filtering&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;zmq_filtering: True&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/etc/salt/minion
service&lt;span class="w"&gt; &lt;/span&gt;salt-minion&lt;span class="w"&gt; &lt;/span&gt;restart
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;操作完毕后, Master进行test.ping测试&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;salt&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;test.ping
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出如下内容:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
minion-02.example.com:
    True
minion-01.example.com:
    True
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="zmq-filtering-1"&gt;
&lt;h3&gt;测试zmq_filtering&lt;/h3&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;以下操作如非特别声明, 均在Master端进行&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;在Master端开启一个新的控制台, 使用tcpdump进行抓包&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tcpdump&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;eth0&lt;span class="w"&gt; &lt;/span&gt;src&lt;span class="w"&gt; &lt;/span&gt;port&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;4505&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用Globbing target进行测试&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;salt&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;minion-01.example.com&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;test.ping
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;tcpdump抓包结果如下:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
07:21:18.104954 IP salt-master.example.com.4505 &amp;gt; salt-minion-01.example.com.58024: Flags [P.], seq 396:602, ack 1, win 227, options [nop,nop,TS val 4253627 ecr 4239803], length 206
07:21:18.105190 IP salt-master.example.com.4505 &amp;gt; salt-minion-02.example.com.33595: Flags [P.], seq 396:602, ack 1, win 227, options [nop,nop,TS val 4253627 ecr 4294907239], length 206
&lt;/pre&gt;
&lt;p&gt;从结果来看, 虽然指定了minion-01.example.com, 因为Salt是PUB-SUB结构, 消息均会发送到所有的Minion&lt;/p&gt;
&lt;p&gt;使用List target进行测试&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;salt&lt;span class="w"&gt; &lt;/span&gt;-L&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;minion-01.example.com&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;test.ping
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;tcpdump抓包结果如下:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
07:23:35.378587 IP salt-master.example.com.4505 &amp;gt; salt-minion-01.example.com.58024: Flags [P.], seq 602:839, ack 1, win 227, options [nop,nop,TS val 4390900 ecr 4245316], length 237
&lt;/pre&gt;
&lt;p&gt;从结果看, 在Master进行了过滤, 虽然是PUB-SUB, 但消息只发送给了salt-minion-01.example.com, 并没有发送到其他Minion上, 达到了zmq_filtering的效果.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="zeromq-pub-sub-message-envelopes"&gt;
&lt;h3&gt;测试ZeroMQ PUB-SUB Message Envelopes性能&lt;/h3&gt;
&lt;p&gt;开启zmq_filtering, 如果不是所有Minion均需要执行的操作, 通过在Master端进行消息过滤, 能够大大降低Master端发送指令时的带宽消耗, 那么zmq_filtering的性能又如何?&lt;/p&gt;
&lt;p&gt;由于zmq_filtering只是利用ZeroMQ的PUB-SUB Message Envelopes, 其性能测试个人觉得只需要测试ZeroMQ PUB/SUB即可. 因此就假设了如下极端场景:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;publisher 1节点, subscriber 1000节点(单节点开启1000个线程)&lt;/li&gt;
&lt;li&gt;进行1000次消息发送, 每条消息均需要发送到所有subscriber&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;直接上代码:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;publisher.py&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;zmq&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;hashlib&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pub&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zmq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zmq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PUB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tcp://*:5556&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sub_ids&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;sub_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;each_sub&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subs&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hashlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;each_sub&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hexdigest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;sub_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sub_list&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;broadcast&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pub&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tgt_type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;glob&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;jid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;20150106053023956920&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tgt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ret&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sudo_vagrant&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;arg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fun&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;test.ping&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;broadcast&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;sub_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sub_ids&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# sleep 30 seconds, guarantee all subscribes have  subscribed&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;regain consciousness&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;start_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;broadcast&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;each_sub&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sub_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
               &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;each_sub&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;zmq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SNDMORE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
               &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;end_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-------------------------------&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Exec times: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;, Exec time: &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt;ms&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end_time&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;start_time&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;subs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;
    &lt;span class="n"&gt;times&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;unicast&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;broadcast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;broadcast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;broadcast subscriber: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;broadcast&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;broadcast&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;broadcast&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;subscriber.py&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;zmq&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;hashlib&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pub_uri&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zmq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zmq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SUB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pub_uri&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setsockopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zmq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SUBSCRIBE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setsockopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zmq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SUBSCRIBE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;broadcast&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;pub_uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tcp://salt-master.example.com:5556&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;sub_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;each_sub&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subs&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;broadcast&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;sub_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pub_uri&lt;/span&gt;&lt;span class="p"&gt;,),&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;times&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hashlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;each_sub&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hexdigest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;sub_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pub_uri&lt;/span&gt;&lt;span class="p"&gt;,),&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;times&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;idx&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;each_sub&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sub_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;each_sub&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;subscriber start ok&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;each_sub&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sub_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;each_sub&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;subscriber done&amp;quot;&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;subs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;
    &lt;span class="n"&gt;times&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;unicast&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;broadcast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;broadcast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;broadcast subscriber: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;broadcast&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;broadcast&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;broadcast&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;测试用例1: 默认的PUB-SUB&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;publisher.py&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# 在Publisher(Master)端进行&lt;/span&gt;
python&lt;span class="w"&gt; &lt;/span&gt;subscriber.py&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;# 在Subcriber(Minion-01)端进行&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行时间为 1588ms&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;测试用例2: 启用PUB-SUB Message Envelopes&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;publisher.py&lt;span class="w"&gt; &lt;/span&gt;unicast&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;# 在Publisher(Master)端进行&lt;/span&gt;
python&lt;span class="w"&gt; &lt;/span&gt;subscriber.py&lt;span class="w"&gt; &lt;/span&gt;unicast&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="c1"&gt;# 在Subcriber(Minion-01)端进行&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行时间为 6786ms&lt;/p&gt;
&lt;p&gt;两者相差5s左右, 由于本次测试, 为极端情况(1000次且每次都需要发送到所有subscriber), 增加的成本在可承受范围之内.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="qa"&gt;
&lt;h3&gt;QA&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Q: 如果只是单边启动zmq_filtering, 是否会影响使用?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A: 这里边有两种情况&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Master端配置了zmq_filtering, 对于没有配置zmq_filtering的Minion, 将像以前一样, master端依然会将消息发送给它(不管target是否匹配), 对于已经开启zmq_filtering的minion, 则如果list target不匹配, master则不会发送消息给它.&lt;/li&gt;
&lt;li&gt;Master没有配置zmq_filtering, 而Minion进行了配置, 则该Minion收不到任何指令&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Q: zmq_filtering适用场景&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A: 当前zmq_filtering只会匹配list target, 对于其他的target方式, 则采用默认的PUB-SUB. zmq_filtering适用于大规模集群, 但每次执行只是少数主机运行指令的场景.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="SaltStack"></category><category term="saltstack"></category><category term="zeromq"></category><category term="zmq_filtering"></category><category term="envelopes"></category></entry><entry><title>显示Salt进程具体名称</title><link href="https://pengyao.org/howto-display-salt-process-name.html" rel="alternate"></link><published>2015-01-08T00:00:00+08:00</published><updated>2015-01-08T00:00:00+08:00</updated><author><name>pengyao</name></author><id>tag:pengyao.org,2015-01-08:/howto-display-salt-process-name.html</id><summary type="html">&lt;p class="first last"&gt;&lt;a class="reference external" href="http://saltstack.com/"&gt;Salt&lt;/a&gt; 当前已经支持显示具体的进程名, 只需要安装 &lt;a class="reference external" href="https://pypi.python.org/pypi/setproctitle"&gt;setproctitle&lt;/a&gt; 重启后即可显示Salt进程的具体名称, 便于Debug&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="http://saltstack.com/"&gt;Salt&lt;/a&gt; 当前已经支持显示具体的进程名, 只需要安装 &lt;a class="reference external" href="https://pypi.python.org/pypi/setproctitle"&gt;setproctitle&lt;/a&gt; 重启后即可显示Salt进程的具体名称, 便于Debug&lt;/p&gt;
&lt;div class="section" id="section-1"&gt;
&lt;h2&gt;环境说明&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;操作系统环境: CentOS 6.5，已配置EPEL源&lt;/li&gt;
&lt;li&gt;Salt Master/Minion版本: 2014.7.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="section-2"&gt;
&lt;h2&gt;测试&lt;/h2&gt;
&lt;p&gt;安装setproctitle(Master/Minion端均进行)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum&lt;span class="w"&gt; &lt;/span&gt;-y&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;python-setproctitle
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;重启salt&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;service&lt;span class="w"&gt; &lt;/span&gt;salt-master&lt;span class="w"&gt; &lt;/span&gt;restart
service&lt;span class="w"&gt; &lt;/span&gt;salt-minion&lt;span class="w"&gt; &lt;/span&gt;restart
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看Master端进程&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ps&lt;span class="w"&gt; &lt;/span&gt;ax&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;salt&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;grep&lt;span class="w"&gt; &lt;/span&gt;-v&lt;span class="w"&gt; &lt;/span&gt;salt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Master端显示如下(同时个人在行尾追加上进程的具体用途):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
2943 ?        S      0:00 /usr/bin/python /usr/bin/salt-master -d ProcessManager       # 中心进程管理器
2944 ?        S      0:00 /usr/bin/python /usr/bin/salt-master -d _clear_old_jobs      # 清除旧的Jobs文件及更新fileserver
2945 ?        Sl     0:00 /usr/bin/python /usr/bin/salt-master -d Publisher            # 将任务PUB到Minion端
2946 ?        Sl     0:00 /usr/bin/python /usr/bin/salt-master -d EventPublisher       # Event Publisher进程
2951 ?        S      0:00 /usr/bin/python /usr/bin/salt-master -d ReqServer_ProcessManager    # ReqServer进程管理器
2952 ?        Sl     0:01 /usr/bin/python /usr/bin/salt-master -d MWorker              # 劳苦大众, 奋斗在一线的Worker进程
2953 ?        Sl     0:01 /usr/bin/python /usr/bin/salt-master -d MWorker              # 同楼上
2954 ?        Sl     0:01 /usr/bin/python /usr/bin/salt-master -d MWorker
2955 ?        Sl     0:01 /usr/bin/python /usr/bin/salt-master -d MWorker
2956 ?        Sl     0:01 /usr/bin/python /usr/bin/salt-master -d MWorker
2957 ?        Sl     0:00 /usr/bin/python /usr/bin/salt-master -d MWorkerQueue         # 将Ret接口(ROUTER)数据转发到Worker(DEALER)
&lt;/pre&gt;
&lt;p&gt;执行个任务, 看看Minion端怎么显示(同时个人在行尾追加上进程的具体用途):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
2003 ?        Sl     0:01 /usr/bin/python /usr/bin/salt-minion -d        # Minion进程, 接收来自Master端的任务
2069 ?        S      0:00 /usr/bin/python /usr/bin/salt-minion -d 20150108034936245247   # 接收到任务后, 会启动名为对应jid的进程进行任务处理及结果反馈
&lt;/pre&gt;
&lt;p&gt;这样, 就可以非常清晰的知道Salt的每个进程是做什么用途的, 如果Master/Minion进程异常, 也可以迅速的定位&lt;/p&gt;
&lt;/div&gt;
</content><category term="SaltStack"></category><category term="saltstack"></category><category term="process"></category><category term="进程名"></category></entry><entry><title>基于Salt管理iptables防火墙规则</title><link href="https://pengyao.org/managing-firewall-with-salt.html" rel="alternate"></link><published>2014-12-17T00:00:00+08:00</published><updated>2014-12-17T00:00:00+08:00</updated><author><name>pengyao</name></author><id>tag:pengyao.org,2014-12-17:/managing-firewall-with-salt.html</id><summary type="html">&lt;p class="first last"&gt;Salt 2014.7支持pillar merge功能, 尝试基于此完成统一的iptables防火墙规则的管理&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Salt 2014.7支持pillar merge功能, 尝试基于该功能, 进行统一的iptables防火墙的管理. 本文采用在iptables INPUT链中增加防火墙规则
(各个服务对应自己的自定义链),同时如果规则中有allow, 则表示该防火墙规则为白名单机制(只允许allow对应的主机访问, 其余均拒绝),
如果没有allow, 则判断是否存在deny, 如果存在, 则执行黑名单机制(只拒绝deny对应的主机, 其余均允许)&lt;/p&gt;
&lt;div class="section" id="section-1"&gt;
&lt;h2&gt;环境说明&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;OS: CentOS 6.5&lt;/li&gt;
&lt;li&gt;Salt架构: Master/Minions架构, 版本为2014.7.0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于2014.7.0中iptables模块存在匹配Bug, 导致会不断进行重复配置, 当前develop分支已经修复这一问题(为修复这个问题的思路点赞), 需要进行对Minion进行如下操作:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 更新已修复匹配Bug的最新iptables模块&lt;/span&gt;
curl&lt;span class="w"&gt; &lt;/span&gt;-so&lt;span class="w"&gt; &lt;/span&gt;/usr/lib/python2.6/site-packages/salt/modules/iptables.py&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
https://raw.githubusercontent.com/saltstack/salt/develop/salt/modules/iptables.py
&lt;span class="c1"&gt;# 重启salt-minion&lt;/span&gt;
service&lt;span class="w"&gt; &lt;/span&gt;salt-minion&lt;span class="w"&gt; &lt;/span&gt;restart
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="section-2"&gt;
&lt;h2&gt;开工&lt;/h2&gt;
&lt;div class="section" id="pillar"&gt;
&lt;h3&gt;Pillar&lt;/h3&gt;
&lt;p&gt;/srv/pillar/sshd/init.sls:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;firewall&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;sshd_firewall&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;22&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;deny&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;192.168.0.0/24&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;8.8.8.8&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;/srv/pillar/httpd/init.sls:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;firewall&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;httpd_firewall&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;80&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;127.0.0.1&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;192.168.0.0/24&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;/srv/pillar/top.sls&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;base&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;sshd&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;httpd&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;获取pillar信息:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;salt&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;pillar.item&lt;span class="w"&gt; &lt;/span&gt;firewall&lt;span class="w"&gt; &lt;/span&gt;--output&lt;span class="o"&gt;=&lt;/span&gt;yaml
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;minion-01.example.com&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;firewall&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;httpd_firewall&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;127.0.0.1&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;192.168.0.0/24&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;80&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;sshd_firewall&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;deny&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;192.168.0.0/24&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;8.8.8.8&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;22&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="state"&gt;
&lt;h3&gt;State&lt;/h3&gt;
&lt;p&gt;/srv/salt/iptables/init.sls:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% for eachfw, fw_rule in pillar['firewall'].iteritems() %}
# Add custom chain
{{ eachfw }}-chain:
  iptables.chain_present:
    - save: True

# Custom chain rules
{% if 'allow' in fw_rule %}
# White Lists
{% for each_allow in fw_rule['allow'] %}
{{ eachfw }}_allow_{{ each_allow }}:
  iptables.insert:
    - table: filter
    - chain: {{ eachfw }}-chain
    - position: 1
    - source: {{ each_allow }}
    - jump: ACCEPT
    - require:
      - iptables: {{ eachfw }}-chain
    - require_in:
      - iptables: {{ eachfw }}_deny
    - save: True
{% endfor %}
# Deny all
{{ eachfw }}_deny:
  iptables.append:
    - table: filter
    - chain: {{ eachfw }}-chain
    - jump: DROP
    - save: True

{% elif 'deny' in fw_rule %}
# Black Lists
{% for each_deny in fw_rule['deny'] %}
{{ eachfw }}_deny_{{ each_deny }}:
  iptables.insert:
    - table: filter
    - chain: {{ eachfw }}-chain
    - position: 1
    - source: {{ each_deny }}
    - jump: DROP
    - require:
      - iptables: {{ eachfw }}-chain
    - require_in:
      - iptables: {{ eachfw }}_allow
    - save: True
{% endfor %}
# Accept all
{{ eachfw }}_allow:
  iptables.append:
    - table: filter
    - chain: {{ eachfw }}-chain
    - jump: ACCEPT
    - save: True
{% endif %}

# Export traffic to custom chain
{{ eachfw }}-main:
  iptables.insert:
    - table: filter
    - chain: INPUT
    - position: 1
    - proto: tcp
    - dport: {{ fw_rule['port'] }}
    - jump: {{ eachfw }}-chain
{% endfor %}
&lt;/pre&gt;
&lt;p&gt;应用iptables配置管理:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;salt&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;state.sls&lt;span class="w"&gt; &lt;/span&gt;iptables
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果输出如下:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
minion-01.example.com:
----------
          ID: sshd_firewall-chain
    Function: iptables.chain_present
      Result: True
     Comment: iptables sshd_firewall-chain chain is already exist in filter table for ipv4
     Started: 07:58:23.325688
    Duration: 6.976 ms
     Changes:
----------
          ID: sshd_firewall_deny_192.168.0.0/24
    Function: iptables.insert
      Result: True
     Comment: iptables rule for sshd_firewall_deny_192.168.0.0/24 already set for ipv4 (--source 192.168.0.0/24 --jump DROP)
              Saved iptables rule for sshd_firewall_deny_192.168.0.0/24 to: --source 192.168.0.0/24 --jump DROP for ipv4
     Started: 07:58:23.333635
    Duration: 46.198 ms
     Changes:
----------
          ID: sshd_firewall_deny_8.8.8.8
    Function: iptables.insert
      Result: True
     Comment: iptables rule for sshd_firewall_deny_8.8.8.8 already set for ipv4 (--source 8.8.8.8 --jump DROP)
              Saved iptables rule for sshd_firewall_deny_8.8.8.8 to: --source 8.8.8.8 --jump DROP for ipv4
     Started: 07:58:23.380231
    Duration: 47.926 ms
     Changes:
----------
          ID: sshd_firewall_allow
    Function: iptables.append
      Result: True
     Comment: iptables rule for sshd_firewall_allow already set (/sbin/iptables -t filter -A sshd_firewall-chain  --jump ACCEPT) for ipv4
              Saved iptables rule for sshd_firewall_allow to: /sbin/iptables -t filter -A sshd_firewall-chain  --jump ACCEPT for ipv4
     Started: 07:58:23.430386
    Duration: 50.731 ms
     Changes:
----------
          ID: sshd_firewall-main
    Function: iptables.insert
      Result: True
     Comment: iptables rule for sshd_firewall-main already set for ipv4 (-p tcp --dport 22 --jump sshd_firewall-chain)
     Started: 07:58:23.481324
    Duration: 38.941 ms
     Changes:
----------
          ID: httpd_firewall-chain
    Function: iptables.chain_present
      Result: True
     Comment: iptables httpd_firewall-chain chain is already exist in filter table for ipv4
     Started: 07:58:23.520640
    Duration: 9.483 ms
     Changes:
----------
          ID: httpd_firewall_allow_127.0.0.1
    Function: iptables.insert
      Result: True
     Comment: iptables rule for httpd_firewall_allow_127.0.0.1 already set for ipv4 (--source 127.0.0.1 --jump ACCEPT)
              Saved iptables rule for httpd_firewall_allow_127.0.0.1 to: --source 127.0.0.1 --jump ACCEPT for ipv4
     Started: 07:58:23.530949
    Duration: 48.088 ms
     Changes:
----------
          ID: httpd_firewall_allow_192.168.0.0/24
    Function: iptables.insert
      Result: True
     Comment: iptables rule for httpd_firewall_allow_192.168.0.0/24 already set for ipv4 (--source 192.168.0.0/24 --jump ACCEPT)
              Saved iptables rule for httpd_firewall_allow_192.168.0.0/24 to: --source 192.168.0.0/24 --jump ACCEPT for ipv4
     Started: 07:58:23.579515
    Duration: 50.945 ms
     Changes:
----------
          ID: httpd_firewall_deny
    Function: iptables.append
      Result: True
     Comment: iptables rule for httpd_firewall_deny already set (/sbin/iptables -t filter -A httpd_firewall-chain  --jump DROP) for ipv4
              Saved iptables rule for httpd_firewall_deny to: /sbin/iptables -t filter -A httpd_firewall-chain  --jump DROP for ipv4
     Started: 07:58:23.631684
    Duration: 50.886 ms
     Changes:
----------
          ID: httpd_firewall-main
    Function: iptables.insert
      Result: True
     Comment: iptables rule for httpd_firewall-main already set for ipv4 (-p tcp --dport 80 --jump httpd_firewall-chain)
     Started: 07:58:23.682788
    Duration: 44.153 ms
     Changes:

Summary
-------------
Succeeded: 10
Failed:     0
-------------
Total states run:     10
&lt;/pre&gt;
&lt;p&gt;检查minion端iptables规则&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;salt&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;cmd.run&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;iptables-save&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
minion-01.example.com:
    # Generated by iptables-save v1.4.7 on Wed Dec 17 08:01:51 2014
    *filter
    :INPUT ACCEPT [65:13902]
    :FORWARD ACCEPT [0:0]
    :OUTPUT ACCEPT [79:24034]
    :httpd_firewall-chain - [0:0]
    :sshd_firewall-chain - [0:0]
    -A INPUT -p tcp -m tcp --dport 80 -j httpd_firewall-chain
    -A INPUT -p tcp -m tcp --dport 22 -j sshd_firewall-chain
    -A httpd_firewall-chain -s 192.168.0.0/24 -j ACCEPT
    -A httpd_firewall-chain -s 127.0.0.1/32 -j ACCEPT
    -A httpd_firewall-chain -j DROP
    -A sshd_firewall-chain -s 8.8.8.8/32 -j DROP
    -A sshd_firewall-chain -s 192.168.0.0/24 -j DROP
    -A sshd_firewall-chain -j ACCEPT
    COMMIT
    # Completed on Wed Dec 17 08:01:51 2014
&lt;/pre&gt;
&lt;p&gt;达到预期&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="SaltStack"></category><category term="Salt"></category><category term="saltstack"></category><category term="iptables"></category><category term="state"></category><category term="防火墙"></category></entry><entry><title>Salt Master外部Job Cache配置</title><link href="https://pengyao.org/saltstack-master-external-job-cache.html" rel="alternate"></link><published>2014-11-20T00:00:00+08:00</published><updated>2014-11-20T00:00:00+08:00</updated><author><name>pengyao</name></author><id>tag:pengyao.org,2014-11-20:/saltstack-master-external-job-cache.html</id><summary type="html">&lt;p class="first last"&gt;SaltStack 2014.7.0对master端的job_cache进行了扩展,可以轻松配置将job执行结果存储到外部系统中.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;SaltStack 2014.7之前, Minion端的执行结果想存储在外部系统中, 需要借助returner进行配置. 而returner的工作方式是由minion端直接连接对应的returner, 在分布式环境中由于网络等限制,该方式并不友好.&lt;/p&gt;
&lt;p&gt;而在Master端, Job Cache会以文件的形式存储在Master本地磁盘, 对第三方系统并不友好. 基于此, 之前有分享过 &lt;a class="reference external" href="http://pengyao.org/saltstack_master_retuner_over_event_system.html"&gt;基于Salt Event系统构建Master端returner&lt;/a&gt; , 需要启动另外一个进程, 进行监听Salt Event接口, 并将结果存储在第三方系统中. 刚好看到2014.7.0中master端增加了 &lt;a class="reference external" href="http://docs.saltstack.com/en/latest/ref/configuration/master.html#master-job-cache"&gt;master_job_cache&lt;/a&gt; 参数, 可以直接外放Job Cache, 就做个测试, 测试下这个功能.&lt;/p&gt;
&lt;div class="section" id="section-1"&gt;
&lt;h2&gt;环境说明&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Salt Version: &lt;em&gt;2014.7.0&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;OS: CentOS 6.5 X86_64 (with &lt;a class="reference external" href="https://fedoraproject.org/wiki/EPEL"&gt;EPEL&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;本次测试结果将存储在MySQL中, 为了方便测试, 已在Master本地部署了MySQL Server&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="section-2"&gt;
&lt;h2&gt;开工&lt;/h2&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;以下操作如非特别注明, 均在Master端进行&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-3"&gt;
&lt;h3&gt;前置配置&lt;/h3&gt;
&lt;p&gt;安装MySQLdb依赖:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum&lt;span class="w"&gt; &lt;/span&gt;-y&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;MySQL-python
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配置本次测试需要使用的数据库及用户:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 创建salt数据库&lt;/span&gt;
mysql&lt;span class="w"&gt; &lt;/span&gt;-e&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;create database salt&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;# 创建用于连接salt数据库的用户&lt;/span&gt;
mysql&lt;span class="w"&gt; &lt;/span&gt;-e&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;grant all on salt.* to salt@localhost identified by &amp;quot;salt_pass&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;# 将数据库配置添加至master配置文件中&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;创建用于存储Job的数据库表结构:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
USE `salt`;

--
-- Table structure for table `jids`
--

DROP TABLE IF EXISTS `jids`;
CREATE TABLE `jids` (
  `jid` varchar(255) NOT NULL,
  `load` mediumtext NOT NULL,
  UNIQUE KEY `jid` (`jid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Table structure for table `salt_returns`
--

DROP TABLE IF EXISTS `salt_returns`;
CREATE TABLE `salt_returns` (
  `fun` varchar(50) NOT NULL,
  `jid` varchar(255) NOT NULL,
  `return` mediumtext NOT NULL,
  `id` varchar(255) NOT NULL,
  `success` varchar(10) NOT NULL,
  `full_ret` mediumtext NOT NULL,
  `alter_time` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  KEY `id` (`id`),
  KEY `jid` (`jid`),
  KEY `fun` (`fun`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="master"&gt;
&lt;h3&gt;配置Master&lt;/h3&gt;
&lt;p&gt;将MySQL连接权限等信息添加到Salt Master配置文件中:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-e&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\n\n# MySQL\nmysql.host: &amp;#39;localhost&amp;#39;\nmysql.user: &amp;#39;salt&amp;#39;\nmysql.pass: &amp;#39;salt_pass&amp;#39;\nmysql.db: &amp;#39;salt&amp;#39;\nmysql.port: 3306&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/etc/salt/master
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配置master_job_cache选项, 以使将Job结果存储在MySQL中:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-e&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\n\n# Master Job Cache\nmaster_job_cache: mysql&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/etc/salt/master
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;重启Salt Master, 以使配置生效:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;service&lt;span class="w"&gt; &lt;/span&gt;salt-master&lt;span class="w"&gt; &lt;/span&gt;restart
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="section-4"&gt;
&lt;h3&gt;测试&lt;/h3&gt;
&lt;p&gt;对主机执行test.ping:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;salt&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;test.ping&lt;span class="w"&gt; &lt;/span&gt;-v
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出结果:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Executing job with jid 20141120060202308159
-------------------------------------------

minion-01.example.com:
    True
&lt;/pre&gt;
&lt;p&gt;查询MySQL jids表数据:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysql&lt;span class="w"&gt; &lt;/span&gt;salt&lt;span class="w"&gt; &lt;/span&gt;-e&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;select * from jids\G&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出结果:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
*************************** 1. row ***************************
jid: 20141120060202308159
load: {&amp;quot;tgt_type&amp;quot;: &amp;quot;glob&amp;quot;, &amp;quot;jid&amp;quot;: &amp;quot;20141120060202308159&amp;quot;, &amp;quot;cmd&amp;quot;: &amp;quot;publish&amp;quot;, &amp;quot;tgt&amp;quot;: &amp;quot;*&amp;quot;, &amp;quot;kwargs&amp;quot;: {&amp;quot;show_timeout&amp;quot;: false, &amp;quot;show_jid&amp;quot;: false}, &amp;quot;ret&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;user&amp;quot;: &amp;quot;sudo_vagrant&amp;quot;, &amp;quot;arg&amp;quot;: [], &amp;quot;fun&amp;quot;: &amp;quot;test.ping&amp;quot;}
&lt;/pre&gt;
&lt;p&gt;查询MySQL salt_returns表数据:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysql&lt;span class="w"&gt; &lt;/span&gt;salt&lt;span class="w"&gt; &lt;/span&gt;-e&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;select * from salt_returns\G&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出结果:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
*************************** 1. row ***************************
fun: test.ping
jid: 20141120060202308159
return: true
id: minion-01.example.com
success: 1
full_ret: {&amp;quot;fun_args&amp;quot;: [], &amp;quot;jid&amp;quot;: &amp;quot;20141120060202308159&amp;quot;, &amp;quot;return&amp;quot;: true, &amp;quot;retcode&amp;quot;: 0, &amp;quot;success&amp;quot;: true, &amp;quot;cmd&amp;quot;: &amp;quot;_return&amp;quot;, &amp;quot;_stamp&amp;quot;: &amp;quot;2014-11-20T06:02:02.533850&amp;quot;, &amp;quot;fun&amp;quot;: &amp;quot;test.ping&amp;quot;, &amp;quot;id&amp;quot;: &amp;quot;minion-01.example.com&amp;quot;}
alter_time: 2014-11-20 06:02:02
&lt;/pre&gt;
&lt;p&gt;Job执行结果已经按照之前的配置存储到了MySQL中, 达到预期效果&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="SaltStack"></category><category term="saltstack"></category><category term="returner"></category><category term="master"></category><category term="master_job_cache"></category></entry><entry><title>salt-broker: 轻量级的Salt Proxy解决方案</title><link href="https://pengyao.org/salt-broker-01.html" rel="alternate"></link><published>2014-09-07T00:00:00+08:00</published><updated>2014-09-07T00:00:00+08:00</updated><author><name>pengyao</name></author><id>tag:pengyao.org,2014-09-07:/salt-broker-01.html</id><summary type="html">&lt;p class="first last"&gt;当前运维系统底层采用 &lt;a class="reference external" href="https://github.com/saltstack/salt"&gt;Salt&lt;/a&gt; 进行实现, 由于节点分布在全国各地, 存在南北通畅问题, 为了解决这个问题, 之前采用了 &lt;a class="reference external" href="http://docs.saltstack.com/en/latest/topics/topology/syndic.html"&gt;Syndic&lt;/a&gt; 方案, 在实际使用中发现由于Syndic采用分治机制, 弱化了MasterOfMaster, 在某些网络状况较差的情况下, 会让结果变得不可控. 为了解决该问题, 借鉴ZeroMQ文档, 开发了轻量的Salt Proxy解决方案 &lt;a class="reference external" href="https://github.com/pengyao/salt-broker"&gt;salt-broker&lt;/a&gt;&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="section-1"&gt;
&lt;h2&gt;基本简介&lt;/h2&gt;
&lt;p&gt;当前运维系统底层采用 &lt;a class="reference external" href="https://github.com/saltstack/salt"&gt;Salt&lt;/a&gt; 进行实现, 由于节点分布在全国各地, 存在南北通畅问题, 为了解决这个问题, 之前采用了 &lt;a class="reference external" href="http://docs.saltstack.com/en/latest/topics/topology/syndic.html"&gt;Syndic&lt;/a&gt; 方案, 在实际使用中发现由于Syndic采用分治机制, 弱化了MasterOfMaster, 在某些网络状况较差的情况下, 会让结果变得不可控. 为了解决该问题, 借鉴ZeroMQ文档, 开发了轻量的Salt Proxy解决方案 &lt;a class="reference external" href="https://github.com/pengyao/salt-broker"&gt;salt-broker&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-2"&gt;
&lt;h2&gt;前置阅读&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://zguide.zeromq.org/page:all#Chapter-Sockets-and-Patterns"&gt;0MQ - The Guide: Sockets and Patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pengyao.org/salt-zeromq-01.html"&gt;Salt中ZeroMQ那点事&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pengyao.org/salt-syndic-01.html"&gt;Salt中Syndic那点事&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="section-3"&gt;
&lt;h2&gt;环境说明&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;CentOS6.4&lt;/li&gt;
&lt;li&gt;Salt &lt;a class="reference external" href="https://github.com/saltstack/salt/tree/v2014.1.10/salt"&gt;2014.1.10&lt;/a&gt; ,默认配置&lt;/li&gt;
&lt;li&gt;由于本文为原理解析, 所以采用的代码为最初版的代码, 只描述了其功能逻辑&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="salt-broker"&gt;
&lt;h2&gt;为什么会有salt-broker?&lt;/h2&gt;
&lt;p&gt;因为采用Syndic, 在网络链路不好的情况下, syndic架构将变得不可控. 详情请访问 &lt;a class="reference external" href="http://pengyao.org/salt-syndic-01.html"&gt;Salt中Syndic那点事&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;而由于业务系统采用Salt作为中心调度, 结果不可控将变得非常糟糕. 尝试在syndic基础上进行修改, 没有达到预期. 分析了需求, 其实自己需要的是一个强中心, 轻量级的Salt Proxy解决方案, 所以就有了 &lt;a class="reference external" href="https://github.com/pengyao/salt-broker"&gt;salt-broker&lt;/a&gt; .&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="salt-broker-1"&gt;
&lt;h2&gt;salt-broker是什么?&lt;/h2&gt;
&lt;p&gt;salt-broker是轻量级的Salt proxy解决方案, 只做数据转发, 不做额外的处理. 其工作原理如下:&lt;/p&gt;
&lt;div class="section" id="pub-broker"&gt;
&lt;h3&gt;PUB Broker&lt;/h3&gt;
&lt;p&gt;在Master/Minions结构中, 命令分发采用ZeroMQ PUB/SUB模式, 如下图:&lt;/p&gt;
&lt;img alt="" src="https://raw.githubusercontent.com/imatix/zguide/master/images/fig4.png" /&gt;
&lt;p&gt;salt-broker中的PUB Broker在中间增加了Forwarder Proxy层, 使架构变成如下:&lt;/p&gt;
&lt;img alt="" src="https://raw.githubusercontent.com/imatix/zguide/master/images/fig18.png" /&gt;
&lt;p&gt;对应代码如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;master_pub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;tcp://&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;master_ip&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pub_port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zmq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;frontend&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zmq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SUB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;frontend&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;master_pub&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;backend&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zmq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PUB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;backend&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tcp://0.0.0.0:&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pub_port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;frontend&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setsockopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zmq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SUBSCRIBE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;frontend&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv_multipart&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;backend&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_multipart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;本地建立PUB接口, 并连接Master的SUB接口, 订阅来自于Master的消息, 接收到后立马发送到本地的PUB接口. 由于Minions上指定的Master地址为salt-broker所在的地址, 所以Minions能够接受到该消息.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ret-broker"&gt;
&lt;h3&gt;Ret Broker&lt;/h3&gt;
&lt;p&gt;在Master/Minions结构中, 认证,文件服务,结果收集等采用ZeroMQ ROUTER/REQ模式, 如下图:&lt;/p&gt;
&lt;img alt="" src="https://raw.githubusercontent.com/imatix/zguide/master/images/fig20.png" /&gt;
&lt;p&gt;salt-broker中的Ret Broker在原来的REQ/ROUTER之间再增加了一层ROUTER/DEALER Proxy层. 对应的代码如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;master_ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;tcp://&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;master_ip&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ret_port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zmq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;frontend&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zmq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ROUTER&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;frontend&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tcp://0.0.0.0:&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ret_port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;backend&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zmq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEALER&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;backend&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;master_ret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;zmq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zmq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QUEUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frontend&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;backend&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;本地建立ROUTER接口, 接收来自于Minions的REQ请求; 同时本地建立DEALER接口, 连接Master的Router接口, 将接收到的数据发送给远端的Master ROUTER接口.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="broker-vs-syndic"&gt;
&lt;h3&gt;Broker VS Syndic&lt;/h3&gt;
&lt;p&gt;salt-broker与syndic一样, 都支持多层级架构. salt-broker相对于syndic, 更为轻量级, 只做数据转发. 在超大规模场景下, salt-broker并不能有效的降低master的压力, 而syndic能够降低.&lt;/p&gt;
&lt;p&gt;syndic本地会维护auth及文件服务系统, 而broker会将所有请求转发给Master, 即所有的Minions的最终管理都是在Master上. 由于所有管理权均在Master上, salt-broker能够解决掉之前Syndic在网络不稳定时的不可控问题.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="salt-broker-2"&gt;
&lt;h2&gt;如何使用salt-broker?&lt;/h2&gt;
&lt;div class="section" id="section-4"&gt;
&lt;h3&gt;全新安装&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;安装salt(需提前配置EPEL)&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum&lt;span class="w"&gt; &lt;/span&gt;-y&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;salt
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;安装salt-broker&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;salt-broker
wget&lt;span class="w"&gt; &lt;/span&gt;https://raw.githubusercontent.com/pengyao/salt-broker/master/pkg/rpm/salt-broker&lt;span class="w"&gt; &lt;/span&gt;-O&lt;span class="w"&gt; &lt;/span&gt;/etc/rc.d/init.d/salt-broker
chmod&lt;span class="w"&gt; &lt;/span&gt;+x&lt;span class="w"&gt; &lt;/span&gt;/etc/rc.d/init.d/salt-broker
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;配置salt-broker&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;/etc/salt/broker&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;master&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;master_ip&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="4"&gt;
&lt;li&gt;启动salt-broker&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;service&lt;span class="w"&gt; &lt;/span&gt;salt-broker&lt;span class="w"&gt; &lt;/span&gt;start
chkconfig&lt;span class="w"&gt; &lt;/span&gt;salt-broker&lt;span class="w"&gt; &lt;/span&gt;on
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="5"&gt;
&lt;li&gt;启动完毕后, 需要将minions配置文件中的master配置为salt-broker所在的主机, 同时重启minions服务&lt;/li&gt;
&lt;li&gt;在Master接收minions的key(如果之前已accept, 无需操作本步骤)&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="syndic"&gt;
&lt;h3&gt;在Syndic主机上安装&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;关于Syndic主机上的syndic及master服务&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;service&lt;span class="w"&gt; &lt;/span&gt;salt-syndic&lt;span class="w"&gt; &lt;/span&gt;stop
service&lt;span class="w"&gt; &lt;/span&gt;salt-master&lt;span class="w"&gt; &lt;/span&gt;stop
chkconfig&lt;span class="w"&gt; &lt;/span&gt;salt-syndic&lt;span class="w"&gt; &lt;/span&gt;off
chkconfig&lt;span class="w"&gt; &lt;/span&gt;salt-master&lt;span class="w"&gt; &lt;/span&gt;off
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;安装salt-broker&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;salt-broker
wget&lt;span class="w"&gt; &lt;/span&gt;https://raw.githubusercontent.com/pengyao/salt-broker/master/pkg/rpm/salt-broker&lt;span class="w"&gt; &lt;/span&gt;-O&lt;span class="w"&gt; &lt;/span&gt;/etc/rc.d/init.d/salt-broker
chmod&lt;span class="w"&gt; &lt;/span&gt;+x&lt;span class="w"&gt; &lt;/span&gt;/etc/rc.d/init.d/salt-broker
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;配置salt-broker&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;/etc/salt/broker&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;master&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;master_ip&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="4"&gt;
&lt;li&gt;启动salt-broker&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;service&lt;span class="w"&gt; &lt;/span&gt;salt-broker&lt;span class="w"&gt; &lt;/span&gt;start
chkconfig&lt;span class="w"&gt; &lt;/span&gt;salt-broker
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="5"&gt;
&lt;li&gt;启动完毕后, 需要将原syndic下的minions配置文件中的master配置为salt-broker所在的主机, 并将/etc/salt/pki/minion/minion_master.pub删掉, 然后重启minion服务&lt;/li&gt;
&lt;li&gt;在Master接收minions的key(如果之前已accept, 无需操作本步骤)&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="section-5"&gt;
&lt;h3&gt;其他注意事项&lt;/h3&gt;
&lt;p&gt;默认配置中, 使用的是pub(4505)及ret(4506)端口, 如果master端口并非该端口, 需要在/etc/salt/broker配置文件中增加:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;ret_port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;new_ret_port&amp;#39;&lt;/span&gt;
&lt;span class="nt"&gt;publish_port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;new_publish_port&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;更改后并重启salt-broker服务.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="SaltStack"></category><category term="saltstack"></category><category term="zeromq"></category><category term="syndic"></category><category term="salt-broker"></category></entry><entry><title>Salt中Syndic那点事</title><link href="https://pengyao.org/salt-syndic-01.html" rel="alternate"></link><published>2014-09-07T00:00:00+08:00</published><updated>2014-09-07T00:00:00+08:00</updated><author><name>pengyao</name></author><id>tag:pengyao.org,2014-09-07:/salt-syndic-01.html</id><summary type="html">&lt;p class="first last"&gt;&lt;a class="reference external" href="https://github.com/saltstack/salt"&gt;Salt&lt;/a&gt; 在 &lt;a class="reference external" href="http://docs.saltstack.com/en/latest/topics/releases/0.9.0.html"&gt;0.9.0版本&lt;/a&gt; 中增加了 &lt;a class="reference external" href="http://docs.saltstack.com/en/latest/topics/topology/syndic.html"&gt;Syndic&lt;/a&gt; 特性. 通过Syndic, 可以快速构建出多层级的Salt拓扑, 使Salt变得更灵活. 那么Syndic是如何工作的? 当前有哪些优势和局限哪?&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="section-1"&gt;
&lt;h2&gt;基本简介&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/saltstack/salt"&gt;Salt&lt;/a&gt; 在 &lt;a class="reference external" href="http://docs.saltstack.com/en/latest/topics/releases/0.9.0.html"&gt;0.9.0版本&lt;/a&gt; 中增加了 &lt;a class="reference external" href="http://docs.saltstack.com/en/latest/topics/topology/syndic.html"&gt;Syndic&lt;/a&gt; 特性. Syndic建立在中心Master和Minions之间, 并允许多层分级Syndic, 使Salt拓扑可以变得更为灵活. 那么Syndic是如何工作的? 当前有哪些优势和局限哪?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-2"&gt;
&lt;h2&gt;前置阅读&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://zguide.zeromq.org/page:all#Chapter-Sockets-and-Patterns"&gt;0MQ - The Guide: Sockets and Patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pengyao.org/salt-zeromq-01.html"&gt;Salt中ZeroMQ那点事&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="section-3"&gt;
&lt;h2&gt;环境说明&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;CentOS6.4&lt;/li&gt;
&lt;li&gt;Salt &lt;a class="reference external" href="https://github.com/saltstack/salt/tree/v2014.1.10/salt"&gt;2014.1.10&lt;/a&gt; ,默认配置&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="syndic"&gt;
&lt;h2&gt;安装配置Syndic&lt;/h2&gt;
&lt;div class="section" id="syndic-1"&gt;
&lt;h3&gt;安装Syndic&lt;/h3&gt;
&lt;p&gt;Syndic是Master的一个小组件, 位于salt-master软件包中, 安装salt-master时就安装了syndic&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum&lt;span class="w"&gt; &lt;/span&gt;-y&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;salt-master
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="syndic-2"&gt;
&lt;h3&gt;配置Syndic&lt;/h3&gt;
&lt;p&gt;默认Syndic的配置文件位于Master配置文件中( &lt;em&gt;/etc/salt/master&lt;/em&gt; ), 需要配置的参数也非常简单:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;syndic_master: 配置MasterOfMaster的IP地址&lt;/li&gt;
&lt;li&gt;syndic_master_port: 配置MasterOfMaster的ret_port(默认为4506)&lt;/li&gt;
&lt;li&gt;syndic_log_file: 指定syndic日志文件(绝对路径)&lt;/li&gt;
&lt;li&gt;syndic_pidfile: 指定syndic pid文件(绝对路径)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;同时MasterOfMaster需要将 &lt;em&gt;order_masters&lt;/em&gt; 选项设置为 &lt;em&gt;True&lt;/em&gt;, 为了使配置生效, 需要对其进行重启.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="syndic-3"&gt;
&lt;h3&gt;运行Syndic&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chkconfig&lt;span class="w"&gt; &lt;/span&gt;salt-master&lt;span class="w"&gt; &lt;/span&gt;on
chkconfig&lt;span class="w"&gt; &lt;/span&gt;salt-syndic&lt;span class="w"&gt; &lt;/span&gt;on
service&lt;span class="w"&gt; &lt;/span&gt;salt-master&lt;span class="w"&gt; &lt;/span&gt;restart
service&lt;span class="w"&gt; &lt;/span&gt;salt-syndic&lt;span class="w"&gt; &lt;/span&gt;restart
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="syndic-4"&gt;
&lt;h2&gt;Syndic是如何工作的?&lt;/h2&gt;
&lt;p&gt;Syndic本质上是一个特殊的Minion, 这不, 其代码就位于 &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.10/salt/minion.py#L1516"&gt;minion.py&lt;/a&gt; 中.&lt;/p&gt;
&lt;p&gt;Syndic需要在本地运行Master, 并将需要管理的Minions的master指向syndic所在的主机. Syndic是这么来工作的:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;冒充Minion, 建立连接MasterOfMaster PUB接口的SUB接口, 订阅所有来自MasterOfMaster下发的任务&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zmq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SUB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setsockopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zmq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SUBSCRIBE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setsockopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zmq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IDENTITY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;master_pub&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;接收到MasterOfMaster下发的数据后, 首先进行解密, 解密完成后, 将其扔到本地的Master接口上进行二次下发:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;serial&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_handle_payload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Send out the publication&lt;/span&gt;
&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tgt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
               &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fun&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
               &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;arg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
               &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tgt_type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
               &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ret&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
               &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;jid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
               &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;to&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;在2中进行的二次下发之后, 监听本地event接口, 获取旗下Minions的返回:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;full&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;并将返回发送给MasterOfMaster Ret接口&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_return_pub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jids&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;jid&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_syndic_return&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="syndic-5"&gt;
&lt;h2&gt;Syndic的优势和局限&lt;/h2&gt;
&lt;div class="section" id="section-4"&gt;
&lt;h3&gt;优势&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;通过Syndic, 可以建立多层级的Salt拓扑, Syndic下的Minions即可通过Syndic所在的Master进行管理, 也可以通过MasterOfMaster及更高层级的Master进行管理, 架构变得异常灵活.&lt;/li&gt;
&lt;li&gt;由于Syndic只订阅MasterOfMaster下发下来的任务, 对于文件服务等, Syndic本地需要进行配置,可以有效的降低MasterOfMaster的负载&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="section-5"&gt;
&lt;h3&gt;局限&lt;/h3&gt;
&lt;p&gt;由于Syndic弱化了MasterOfMaster, 采用区域自治方法. 在某些应用场景下, 会有局限性:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;优势2中的优势, 也带来了局限, 需要保证Syndic上的file_roots及pillar_roots与MasterOfMaster是一致的. 为了解决这个问题, 我们在使用Syndic时采用了 &lt;a class="reference external" href="http://docs.saltstack.com/en/latest/topics/tutorials/gitfs.html"&gt;gitfs backend&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;由于Syndic管理了旗下Minions的认证, 使MasterOfMaster并不知道有多少Syndic主机, Syndic下边有多少Minions. 在MasterOfMaster及更高层级的Master上使用salt命令行下发远程执行命令时, 如果Syndic此时与MasterOfMaster网络抖动, 导致没有收到消息或延迟收到消息, MasterOfMaster并不知情; Syndic并没有返回结果或延迟返回结果, MasterOfMaster并不能感知到, 会导致结果不完整. 如果没有其他验证机制, 将变得不可控. 官方提供的解决方案是增大 &lt;em&gt;syndic_wait&lt;/em&gt; 选项, 但个人认为只能缓解,并不能根治本问题.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="SaltStack"></category><category term="saltstack"></category><category term="zeromq"></category><category term="syndic"></category></entry><entry><title>Salt中ZeroMQ那点事</title><link href="https://pengyao.org/salt-zeromq-01.html" rel="alternate"></link><published>2014-09-06T00:00:00+08:00</published><updated>2014-09-06T00:00:00+08:00</updated><author><name>pengyao</name></author><id>tag:pengyao.org,2014-09-06:/salt-zeromq-01.html</id><summary type="html">&lt;p class="first last"&gt;&lt;a class="reference external" href="https://github.com/saltstack/salt"&gt;Salt&lt;/a&gt; 底层网络架构采用 &lt;a class="reference external" href="http://zeromq.org/"&gt;ZeroMQ&lt;/a&gt; 进行实现(2014.1及之前版本, 从2014.7起, Salt新增 &lt;a class="reference external" href="https://github.com/saltstack/raet"&gt;RAET&lt;/a&gt; ), 那么Salt都使用了ZeroMQ哪些模式? 各个组件间又是如何协作的?&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="section-1"&gt;
&lt;h2&gt;基本简介&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/saltstack/salt"&gt;Salt&lt;/a&gt; 底层网络架构采用 &lt;a class="reference external" href="http://zeromq.org/"&gt;ZeroMQ&lt;/a&gt; 进行实现(2014.1及之前版本, 从2014.7起, Salt新增 &lt;a class="reference external" href="https://github.com/saltstack/raet"&gt;RAET&lt;/a&gt; ), &lt;a class="reference external" href="http://docs.saltstack.com/en/latest/topics/index.html#building-on-proven-technology"&gt;官方手册&lt;/a&gt; 有简短描述. 那么今天就一窥在Salt内部使用了哪些 &lt;a class="reference external" href="http://zeromq.org/"&gt;ZeroMQ&lt;/a&gt; pattern? 各个组件间又是如何协作的哪?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-2"&gt;
&lt;h2&gt;前置阅读&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://zguide.zeromq.org/page:all#Chapter-Sockets-and-Patterns"&gt;0MQ - The Guide: Sockets and Patterns&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="section-3"&gt;
&lt;h2&gt;环境说明&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;CentOS6.4&lt;/li&gt;
&lt;li&gt;Salt &lt;a class="reference external" href="https://github.com/saltstack/salt/tree/v2014.1.10/salt"&gt;2014.1.10&lt;/a&gt; ,默认配置&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="saltzeromq-patterns"&gt;
&lt;h2&gt;Salt中的ZeroMQ patterns&lt;/h2&gt;
&lt;div class="section" id="salt-master"&gt;
&lt;h3&gt;Salt Master&lt;/h3&gt;
&lt;p&gt;Salt Master为Salt中心管控节点. 为Salt环境提供命令下发, 文件, 结果收集等服务.&lt;/p&gt;
&lt;p&gt;在Master启动时, 首先启动名为 &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.10/salt/master.py#L452"&gt;ReqServer&lt;/a&gt; , &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.10/salt/master.py#L584"&gt;ReqServer在初始化&lt;/a&gt; 时, 立即创建如下ZeroMQ patterns:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;clients&lt;/em&gt;:&lt;ul&gt;
&lt;li&gt;ZeroMQ pattern: zmq.ROUTER&lt;/li&gt;
&lt;li&gt;listen地址: &lt;a class="reference external" href="tcp://0.0.0.0:4506"&gt;tcp://0.0.0.0:4506&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;listen方式: bind&lt;/li&gt;
&lt;li&gt;作用: Salt Master Ret接口, 支持认证(auth), 文件服务, 结果收集等功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;workers&lt;/em&gt;:&lt;ul&gt;
&lt;li&gt;ZeroMQ pattern: zmq.DEALER&lt;/li&gt;
&lt;li&gt;listen地址: ipc:///var/run/salt/master/workers.ipc&lt;/li&gt;
&lt;li&gt;listen方式: bind&lt;/li&gt;
&lt;li&gt;作用: Salt Master任务处理进程接口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;同时clients与workers, 建立了一个 &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.10/salt/master.py#L635"&gt;zeromq.device&lt;/a&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;zmq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zmq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QUEUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clients&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;workers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过zmq.device, 实现了clients接收到请求后, 转发到workers进程接口上进行处理&lt;/p&gt;
&lt;p&gt;接下来, Master会启动 &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.10/salt/master.py#L635"&gt;Publisher&lt;/a&gt; , 立即创建了如下ZeroMQ patterns:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;pub&lt;/em&gt;:&lt;ul&gt;
&lt;li&gt;ZeroMQ pattern: zmq.PUB&lt;/li&gt;
&lt;li&gt;listen地址: &lt;a class="reference external" href="tcp://0.0.0.0:4505"&gt;tcp://0.0.0.0:4505&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;listen方式: bind&lt;/li&gt;
&lt;li&gt;作用: Salt Master pub接口, 提供远程执行命令发送功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;pull&lt;/em&gt;:&lt;ul&gt;
&lt;li&gt;ZeroMQ pattern: zmq.PULL&lt;/li&gt;
&lt;li&gt;listen地址: ipc:///var/run/salt/master/publish_pull.ipc&lt;/li&gt;
&lt;li&gt;listen方式: bind&lt;/li&gt;
&lt;li&gt;作用: Salt Master远程执行命令pull接口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;pull接口在接收到数据后, 会将数据从pub接口上进行发送:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pull_sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;pub_sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来, Master启动 &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.10/salt/utils/event.py#L430"&gt;EventPublisher&lt;/a&gt;, 以实现Event BUS, 创建了如下ZeroMQ patterns:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;epub&lt;/em&gt;:&lt;ul&gt;
&lt;li&gt;ZeroMQ pattern: zmq.PUB&lt;/li&gt;
&lt;li&gt;listen地址: ipc:///var/run/salt/master/master_event_pub.ipc&lt;/li&gt;
&lt;li&gt;listen方式: bind&lt;/li&gt;
&lt;li&gt;作用: Salt Master event pub接口, 以方便其他或第三方应用订阅event bus上的event&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;epull&lt;/em&gt;:&lt;ul&gt;
&lt;li&gt;ZeroMQ pattern: zmq.PULL&lt;/li&gt;
&lt;li&gt;listen地址: ipc:///var/run/salt/master/master_event_pull.ipc&lt;/li&gt;
&lt;li&gt;listen方式: bind&lt;/li&gt;
&lt;li&gt;作用: Salt Master event pull接口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;同时epull接口在收到包时, 会将数据在pub接口上进行发送:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;epull_sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;epub_sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在启动EventPublisher之后, Salt Master会继续启动Halite, Reactor系统, 该部分暂不描述. 随后, Salt会启动多个Work进程(默认是5, 在规模较大的环境中, 建议增加配置文件中的 &lt;em&gt;worker_threads&lt;/em&gt; 数目来增加该类进程)来进行任务处理, 每个Worker进程会创建如下ZeroMQ patterns:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;socket&lt;/em&gt;&lt;ul&gt;
&lt;li&gt;ZeroMQ pattern: zmq.REP&lt;/li&gt;
&lt;li&gt;listen地址: ipc:///var/run/salt/master/workers.ipc&lt;/li&gt;
&lt;li&gt;listen方式: connect&lt;/li&gt;
&lt;li&gt;作用: Salt Master任务处理进程, 处理验证Minion, 获取Master配置, Mine, pillar, fileserver文件获取, minion event fire到master的event接口, 收集minions的返回结果等任务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="salt-minion"&gt;
&lt;h3&gt;Salt Minion&lt;/h3&gt;
&lt;p&gt;Salt Minion为Salt环境操作节点, 远程命令从Master发送过来后, 会在该主机上进行执行并将结果返回给Master.&lt;/p&gt;
&lt;p&gt;Salt &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.10/salt/minion.py#L524"&gt;Minion&lt;/a&gt; 在启动时从配置文件中获取Master的地址, 如果为域名, 则进行解析. 解析完毕后, 会连接Master的Ret接口进行key认证. 认证通过, 会获取到master的 &lt;em&gt;publish_port&lt;/em&gt; , 这就是为什么在Minion的配置文件中只需要指定Minion的 &lt;em&gt;ret_port&lt;/em&gt; (对应minion配置文件中的master_port) 即可.&lt;/p&gt;
&lt;p&gt;在获取到master的publish_port(默认为4505)之后, 会建立minion本地的Event接口:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;epub&lt;/em&gt;:&lt;ul&gt;
&lt;li&gt;ZeroMQ pattern: zmq.PUB&lt;/li&gt;
&lt;li&gt;listen地址: ipc:///var/run/salt/minion/minion_event_{id_hash}_pub.ipc&lt;/li&gt;
&lt;li&gt;listen方式: bind&lt;/li&gt;
&lt;li&gt;作用: Salt Minion event pub接口, 以便其他或第三方应用通过该event bus获取event信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;epull&lt;/em&gt;:&lt;ul&gt;
&lt;li&gt;ZeroMQ pattern: zmq.PULL&lt;/li&gt;
&lt;li&gt;listen地址: ipc:///var/run/salt/minion/minion_event_{id_hash}_pull.ipc&lt;/li&gt;
&lt;li&gt;listen方式: bind&lt;/li&gt;
&lt;li&gt;作用: Salt Minion event pull接口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;epull接口在接收到数据后, 会检查是否需要处理, 如果需要处理, 则进行执行. 随后将该数据包传送到epub接口:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Check the event system&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;socks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;epull_sock&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;zmq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POLLIN&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;epull_sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zmq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NOBLOCK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Handling event &lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;module_refresh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;module_refresh&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pillar_refresh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pillar_refresh&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;grains_refresh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grains_cache&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;grains&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pillar_refresh&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grains_cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;grains&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
             &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fire_master&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                 &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MinionEvent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unpack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                 &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Forwarding master event tag=&lt;/span&gt;&lt;span class="si"&gt;{tag}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tag&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
                 &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_fire_master&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tag&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;events&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pretag&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;epub_sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Exception while handling events&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exc_info&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在event接口建立完毕后, 会建立如下ZeroMQ pattern:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;socket&lt;/em&gt;:&lt;ul&gt;
&lt;li&gt;ZeroMQ pattern: zmq.SUB&lt;/li&gt;
&lt;li&gt;listen地址: &lt;a class="reference external" href="tcp:/"&gt;tcp:/&lt;/a&gt;/{master_ip}:4505&lt;/li&gt;
&lt;li&gt;listen方式: connect&lt;/li&gt;
&lt;li&gt;作用: 订阅来自Master pub接口的任务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于远程执行命令的发送, 是通过ZeroMQ PUB/SUB pattern进行建立的, 即当master下发操作指令时, 所有的minion均可以接收到, 然后minion会检查本机是否target match, 如果match, 则进行执行.执行完毕后, 会通过 &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.10/salt/payload.py#L159"&gt;SREQ&lt;/a&gt; 发送到Master的Ret接口, 期间会创建如下ZeroMQ pattern:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;socket&lt;/em&gt;:&lt;ul&gt;
&lt;li&gt;ZeroMQ pattern: zmq.REQ&lt;/li&gt;
&lt;li&gt;listen地址: &lt;a class="reference external" href="tcp:/"&gt;tcp:/&lt;/a&gt;/{master_ip}:4506&lt;/li&gt;
&lt;li&gt;listen方式: connect&lt;/li&gt;
&lt;li&gt;作用: 将执行结果发送给Master&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;更多关于Minion如何来执行任务, 请访问: &lt;a class="reference external" href="http://devopstarter.info/yuan-ma-jie-du-saltstackyun-xing-ji-zhi-zhi-job-runtime/"&gt;http://devopstarter.info/yuan-ma-jie-du-saltstackyun-xing-ji-zhi-zhi-job-runtime/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="salt"&gt;
&lt;h3&gt;Salt&lt;/h3&gt;
&lt;p&gt;Salt Master与Salt Minion建立了对应的ZeroMQ pattern, 那么当一个远程执行指令下发下去, 其数据流向是怎么个流程哪? 以执行test.ping为例:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;在master端bash下, 执行:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;salt&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;test.ping
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其对应的 &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.10/salt/scripts.py#L126"&gt;python执行&lt;/a&gt; 是:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cli&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SaltCMD&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在内部, 又是调用:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LocalClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;cmd_fun&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmd_cli&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;full_ret&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cmd_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_format_ret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;full_ret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_output_ret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;在 &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.10/salt/client/__init__.py#L77"&gt;LocalClient&lt;/a&gt; 对象初始化时, 会创建用于对发送的数据进行序列化的 &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.10/salt/client/__init__.py#L77"&gt;Serial&lt;/a&gt; 对象, 及 &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.10/salt/utils/event.py#L406"&gt;MasterEvent&lt;/a&gt; 对象. MasterEvent对象会创建如下ZeroMQ pattern:&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;sub&lt;/em&gt;:&lt;ul&gt;
&lt;li&gt;ZeroMQ pattern: zmq.SUB&lt;/li&gt;
&lt;li&gt;listen地址: ipc:///var/run/salt/master/master_event_pub.ipc&lt;/li&gt;
&lt;li&gt;listen方式: connect&lt;/li&gt;
&lt;li&gt;作用: 用于订阅来自于Master event pub接口的数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol class="arabic" start="3"&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.10/salt/client/__init__.py#L524"&gt;cmd_cli&lt;/a&gt; 在执行时, 会首先通过 &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.10/salt/client/__init__.py#L234"&gt;run_job&lt;/a&gt; 将操作指令封装成如下内容:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;{'tgt_type': 'glob', 'jid': '', 'key': 'LCkViTMgqKBqb5ooG8kznznztLYPsWR1xdTYnAz9udkU9/Lla32yDvUmVKLPaUNSMtbWdBoQPIs=', 'tgt': '*', 'arg': [], 'fun': 'test.ping', 'kwargs': {'show_timeout': False}, 'cmd': 'publish', 'ret': '', 'user': 'root'}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;将发送到本地master的Ret接口, 期间会创建如下ZeroMQ pattern:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;socket&lt;/em&gt;:&lt;ul&gt;
&lt;li&gt;ZeroMQ pattern: zmq.REQ&lt;/li&gt;
&lt;li&gt;listen地址: &lt;a class="reference external" href="tcp://127.0.0.1:4506"&gt;tcp://127.0.0.1:4506&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;listen方式: connect&lt;/li&gt;
&lt;li&gt;作用: 将封装后的指令发送到Master Ret接口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol class="arabic simple" start="4"&gt;
&lt;li&gt;Master Ret接口接收到3中发送的数据后, 会通过chminions.check_minions获取本次需要哪些minions执行, 并产生jid, 然后在master event接口上进行fire_event操作, 之后对数据使用master私钥(master.pem)进行签名, 然后创建如下ZeroMQ pattern:&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;pub_socket&lt;/em&gt;:&lt;ul&gt;
&lt;li&gt;ZeroMQ pattern: zmq.PUSH&lt;/li&gt;
&lt;li&gt;listen地址: ipc:///var/run/salt/master/publish_pull.ipc&lt;/li&gt;
&lt;li&gt;listen方式: connect&lt;/li&gt;
&lt;li&gt;作用: 将指令传送到Master Pull接口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Master Pull接口接收到数据后, 会迅速的在Master Pub接口上发送将之前收到的数据&lt;/p&gt;
&lt;p&gt;同时将jid及minions封装后的结果返回给3, 3中cmd_cli获取到数据后, 调用 &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.10/salt/client/__init__.py#L1142"&gt;get_cli_event_returns&lt;/a&gt; ,监听Master端的Event bus, 过滤出本次任务jid所对应的event, 用来获取执行结果&lt;/p&gt;
&lt;ol class="arabic simple" start="5"&gt;
&lt;li&gt;此时Minion通过PUB/SUB, 即可收到来自于Master Pub接口的消息. Minion接收到消息后, 会首先通过本地的master pub_key(minion_master.pub)进行解密, 已确保消息来自于Master. 解密完成后, 本地进行target匹配, 如果匹配上, 表示需要执行, 派生出一个新的进程进行执行. 反之则直接忽略.&lt;/li&gt;
&lt;li&gt;Minion执行完毕后, 会通过 &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.10/salt/minion.py#L938"&gt;_return_pub&lt;/a&gt; 将封装后的结果通过AES加密发送到Master的Ret接口&lt;/li&gt;
&lt;li&gt;Master Ret接收到6中发送的数据后, 会进行AES解密, 然后通过 &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.10/salt/master.py#L1354"&gt;_return&lt;/a&gt;, 首先将解密后的数据在本地event接口上进行fire_event, 并将结果存储在master本地.&lt;/li&gt;
&lt;li&gt;由于7中进行fire_event, 此时4中的get_cli_event_returns即可捕捉到, 由于采用迭代器, 每个收到的结果均能马上显示出来, 一旦捕获到的minions的结果大于等于之前获得的minions数目, 即表示所有minions均已返回结果, 退出.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="section-4"&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;Salt利用ZeroMQ灵活高效的patterns, 使Salt网络拓扑变得非常灵活高效. 利用PUB/SUB, 实现了高效的远程执行指令下发机制; 利用ROUTER/REQ, 实现认证及异步的远程执行结果返回; 利用DEALER/REP, 实现多进程任务处理机制; 利用PULL/PUB, 实现Event BUS, 使其他或第三方应用可以快速的使用PUB/SUB接收到Event BUS上的消息.&lt;/p&gt;
&lt;p&gt;I love Salt, I love ZeroMQ!&lt;/p&gt;
&lt;/div&gt;
</content><category term="SaltStack"></category><category term="saltstack"></category><category term="zeromq"></category></entry><entry><title>Salt中Pillar那点事</title><link href="https://pengyao.org/salt-pillar-01.html" rel="alternate"></link><published>2014-06-08T00:00:00+08:00</published><updated>2014-06-08T00:00:00+08:00</updated><author><name>pengyao</name></author><id>tag:pengyao.org,2014-06-08:/salt-pillar-01.html</id><summary type="html">&lt;p class="first last"&gt;在 &lt;a class="reference external" href="http://saltstack.com/"&gt;SaltStack&lt;/a&gt; 中, Pillar作为定义minion全局数据的接口. 那么在Salt内部, Pillar是如何工作的? 在哪些情况下, 使用Pillar需要先执行刷新操作? 而哪些又不需要?&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="section-1"&gt;
&lt;h2&gt;基本简介&lt;/h2&gt;
&lt;p&gt;在 &lt;a class="reference external" href="http://saltstack.com/"&gt;SaltStack&lt;/a&gt; 中, Pillar作为定义minion全局数据的接口. 默认存储在master端, Minion启动时会连接master获取最新的pillar数据. Pillar使用类似于State Tree的结构, 默认使用 &lt;cite&gt;YAML&lt;/cite&gt; 作为其描述格式, 在Minion内部最终转换成 &lt;a class="reference external" href="https://docs.python.org/2/tutorial/datastructures.html#dictionaries"&gt;Python字典&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;那么在Salt内部, Pillar是如何工作的? 在哪些情况下,需要先执行刷新Pillar操作? 而哪些又不需要?&lt;/p&gt;
&lt;p&gt;本文基于 &lt;a class="reference external" href="http://docs.saltstack.com/en/latest/topics/releases/2014.1.4.html"&gt;Salt 2014.1.4&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pillar"&gt;
&lt;h2&gt;配置文件中的Pillar&lt;/h2&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;pillar_roots&lt;/dt&gt;
&lt;dd&gt;存在于master/minion配置文件中. 指定Pillar roots对应环境的目录, 其布局类似于State Tree. 在minion配置文件中配置该选项, 只有当 &lt;em&gt;file_client&lt;/em&gt; 为 &lt;em&gt;local&lt;/em&gt; 时才生效.&lt;/dd&gt;
&lt;dt&gt;state_top&lt;/dt&gt;
&lt;dd&gt;存在于master/minion配置文件中, 默认值为top.sls. 官方描述为用于state system, 用于告诉minion使用哪个环境并且需要执行哪些模块. 其实该选项也应用在pillar system中, 作用和state system类似. 所以如果更改了本选项, pillar system对应的top.sls也需要变更. 在minion配置文件中配置该选项, 只有当 &lt;em&gt;file_client&lt;/em&gt; 为 &lt;em&gt;local&lt;/em&gt; 时才生效.&lt;/dd&gt;
&lt;dt&gt;file_client&lt;/dt&gt;
&lt;dd&gt;存在于minion配置文件中, 默认值为remote. 用于指定去哪里查找文件. 有效值是 &lt;em&gt;remote&lt;/em&gt; 和 &lt;em&gt;local&lt;/em&gt;. &lt;em&gt;remote&lt;/em&gt; 表示使用master, &lt;em&gt;local&lt;/em&gt; 用于 &lt;a class="reference external" href="http://docs.saltstack.com/en/latest/topics/tutorials/quickstart.html#telling-salt-to-run-masterless"&gt;Masterless&lt;/a&gt; 的情况.&lt;/dd&gt;
&lt;dt&gt;pillar_opts&lt;/dt&gt;
&lt;dd&gt;存在于master配置文件中, 默认值为True. 指定是否将master配置选项作为pillar. 如果该选项为True, 修改了master配置选项时, 需要重启master, 才能在pillar中得到最新的值.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="minionpillar"&gt;
&lt;h2&gt;Minion中的Pillar实现&lt;/h2&gt;
&lt;p&gt;Minion中pillar为Python字典, Minion启动时, 默认会连接master获取最新的pillar数据, 存储在 &lt;em&gt;self.opts['pillar']&lt;/em&gt; 中. &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.4/salt/minion.py#L520"&gt;对应代码&lt;/a&gt; 如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Minion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MinionBase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;    This class instantiates a minion, runs connections for a minion,&lt;/span&gt;
&lt;span class="sd"&gt;    and loads all of the functions into the minion&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;safe&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;        Pass in the options dict&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class="o"&gt;......&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pillar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pillar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_pillar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;grains&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;environment&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile_pillar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="o"&gt;......&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;那么 &lt;em&gt;salt.pillar.get_pillar&lt;/em&gt; 是如何工作的? &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.4/salt/pillar/__init__.py#L28"&gt;对应代码&lt;/a&gt; 如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_pillar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;grains&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;saltenv&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ext&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;    Return the correct pillar driver based on the file_client option&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warn_until&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;Boron&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;Passing a salt environment should be done using &lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt;saltenv&lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt; &amp;#39;&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;not &lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt;env&lt;/span&gt;&lt;span class="se"&gt;\&amp;#39;&lt;/span&gt;&lt;span class="s1"&gt;. This functionality will be removed in Salt Boron.&amp;#39;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# Backwards compatibility&lt;/span&gt;
        &lt;span class="n"&gt;saltenv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;remote&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;RemotePillar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;local&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Pillar&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;file_client&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;Pillar&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;grains&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;saltenv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;也可以从代码中获知, 会从opts中获取 &lt;em&gt;file_client&lt;/em&gt; 值, 如果是remote, 则对应的对象为RemotePillar, 如果是local, 则为Pillar, 进行后续处理&lt;/p&gt;
&lt;p&gt;如果Minion在运行过程中, 接受到的指令以 &lt;em&gt;refresh_pillar&lt;/em&gt; 字符串开头, 则执行 &lt;em&gt;pillar_refresh&lt;/em&gt; 操作. &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.4/salt/minion.py#L1376"&gt;对应代码&lt;/a&gt; 如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;module_refresh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;module_refresh&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pillar_refresh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pillar_refresh&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;那么 &lt;em&gt;pillar_refresh()&lt;/em&gt; 都进行了哪些工作? &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.4/salt/minion.py#L1090"&gt;对应代码&lt;/a&gt; 如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pillar_refresh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;    Refresh the pillar&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pillar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pillar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_pillar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;grains&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;environment&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile_pillar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;module_refresh&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从代码中得知, pillar_refresh操作, 除了从Master端/Minion本地获取最新的pillar信息外, 也会执行模块刷新(module_refresh)工作. 可以将minion本地的日志级别调整为 &lt;em&gt;trac&lt;/em&gt;, 然后执行 &lt;em&gt;saltutil.refresh_pillar&lt;/em&gt; 操作, 然后观察minion日志, 是否会刷新模块进行验证.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="targetpillar"&gt;
&lt;h2&gt;Target中的Pillar&lt;/h2&gt;
&lt;p&gt;Salt指令发送底层网络, 采用ZeroMQ PUB/SUB结构. Minion会监听SUB接口, Master会将指令发送到本地的PUB接口, 然后所有Minion均会收到该指令, 然后在Minion本地判断自己是否需要执行该指令(即Target). 当前版本中, 已经支持pillar作为Target(通过&amp;quot;-I&amp;quot;选项指定). &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.4/salt/minion.py#L1809"&gt;对应代码&lt;/a&gt; 如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pillar_match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tgt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;    Reads in the pillar glob match&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pillar target: &lt;/span&gt;&lt;span class="si"&gt;{0}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tgt&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;delim&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tgt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Got insufficient arguments for pillar match &amp;#39;&lt;/span&gt;
                  &lt;span class="s1"&gt;&amp;#39;statement from master&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subdict_match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pillar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;tgt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;delim&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看出, 其匹配使用的是 &lt;em&gt;self.opts['pillar']&lt;/em&gt; 即当前Minion内存中的Pillar的数据. 因此如果在Master/Minion(当 &lt;em&gt;file_client&lt;/em&gt; 为 &lt;em&gt;local&lt;/em&gt; 时)修改了Pillar数据后, 想要使用最新的Pillar来做Target操作, 需要在执行前先手动执行 &lt;em&gt;saltutil.refresh_pillar&lt;/em&gt; 操作, 以刷新Minion内存中的Pillar数据.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pillar-1"&gt;
&lt;h2&gt;远程执行模块中的Pillar&lt;/h2&gt;
&lt;div class="section" id="pillar-items"&gt;
&lt;h3&gt;pillar.items&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.4/salt/modules/pillar.py#L42"&gt;对应代码&lt;/a&gt; 如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pillar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pillar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_pillar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;__opts__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;__grains__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;__opts__&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;__opts__&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;environment&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;pillar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile_pillar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;会连接Master/Minion(当 &lt;em&gt;file_client&lt;/em&gt; 为 &lt;em&gt;local&lt;/em&gt; 时)获取最新的pillar数据并返回. 但并不会刷新Minion本地的缓存. 也就是说, 在master端修改了Pillar Tree, 在刷新pillar(saltutil.refresh_pillar)前, 可以先使用 &lt;em&gt;pillar.items&lt;/em&gt; 来验证其数据是否达到预期.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pillar-data"&gt;
&lt;h3&gt;pillar.data&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.4/salt/modules/pillar.py#L67"&gt;对应代码&lt;/a&gt; 如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;只是创建了一个赋值引用, 指定data和执行items一样&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pillar-item"&gt;
&lt;h3&gt;pillar.item&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.4/salt/modules/pillar.py#L70"&gt;对应代码&lt;/a&gt; 如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="n"&gt;pillar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pillar&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;KeyError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;先使用pillar.items来获取最新的Master端最新的pillar数据. 然后一个for循环, 从items获取所需要的keys对应的值. 所以item可以查询多个key.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pillar-raw"&gt;
&lt;h3&gt;pillar.raw&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.4/salt/modules/pillar.py#L93"&gt;对应代码&lt;/a&gt; 如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;__pillar__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;__pillar__&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从当前Minion本地获取 __pillar__ (self.opts[pillar])的值. 也就是说使用 &lt;em&gt;pillar.raw&lt;/em&gt; 与 &lt;em&gt;pillar.items&lt;/em&gt; 不同, 获取到的是Minion内存中的pillar的值, 并非是master端定义的值. 如果指定了key, 则返回对应key的值. 如果没有, 则返回整个 __pillar__&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pillar-get"&gt;
&lt;h3&gt;pillar.get&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.4/salt/modules/pillar.py#L16"&gt;对应代码&lt;/a&gt; 如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;traverse_dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__pillar__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;和 &lt;em&gt;pillar.raw&lt;/em&gt; 工作方式类似, 是从 __pillar__ 中进行的取值, 用于获取pillar中对应的key值. 与 pillar.raw执行key不同的是, get递归获取内嵌字典的值(默认以&amp;quot;:&amp;quot;做分隔). 从最新develop分支中看, 下一个版本(Helium)中将增加merge功能.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pillar-ext"&gt;
&lt;h3&gt;pillar.ext&lt;/h3&gt;
&lt;p&gt;与pillar.items工作方式类似, 用于获取ext pillar的值&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="saltutil-refresh-pillar"&gt;
&lt;h3&gt;saltutil.refresh_pillar&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.4/salt/modules/saltutil.py#L335"&gt;对应代码&lt;/a&gt; 如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;__salt__&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;event.fire&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]({},&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pillar_refresh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在Minion本地Event接口上产生一个 &lt;em&gt;pillar_refresh&lt;/em&gt; event. 之前在Minion中的Pillar中, Minion本地会监听本地Event接口, 如果捕捉到以 &lt;em&gt;pillar_refresh&lt;/em&gt; 开始的指令, 会刷新本地pillar.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="pillar-2"&gt;
&lt;h2&gt;配置管理中的Pillar&lt;/h2&gt;
&lt;div class="section" id="slspillar"&gt;
&lt;h3&gt;在SLS中使用Pillar&lt;/h3&gt;
&lt;p&gt;在SLS中, 可以直接使用pillar. 如pillar['pkg'], 其直接使用的是Minion当前内存中pillar的值(self.opts['pillar']).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="state-sls-state-highstate"&gt;
&lt;h3&gt;state.sls &amp;amp; state.highstate&lt;/h3&gt;
&lt;p&gt;将这两个远程执行模块方法放到配置管理中, 因为其功能是用于向Minions发送配置管理指令.&lt;/p&gt;
&lt;p&gt;state.sls及state.highstate在代码中, 均为 &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.4/salt/state.py#L2574"&gt;salt.state.HighState&lt;/a&gt; 对象. 在执行时为 &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.4/salt/state.py#L526"&gt;State&lt;/a&gt; 对象. State类在实例化时,则会刷新pillar, &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.4/salt/state.py#L530"&gt;对应代码&lt;/a&gt; 如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;State&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;    Class used to execute salt states&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pillar&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;grains&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;grains&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_pillar_override&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pillar&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pillar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_gather_pillar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;而_gather_pillar &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.4/salt/state.py#L544"&gt;对应代码&lt;/a&gt; 如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_gather_pillar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;    Whenever a state run starts, gather the pillar data fresh&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;pillar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pillar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_pillar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;grains&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;environment&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pillar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile_pillar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_pillar_override&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_pillar_override&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_pillar_override&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;_gather_pillar从Master上获取Minion对应的最新pillar数据, __init__方法中的 &lt;em&gt;self.opts['pillar'] = self._gather_pillar()&lt;/em&gt; 将该数据赋值给self.opts['pillar']以完成Minion本地内存中Pillar数据的刷新操作. 这就是为什么修改了Master上的Pillar的值, 而无需执行刷新操作(saltutil.refresh_pillar), 因为在执行state.highstate及state.sls时会自动应该最新的值.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ext-pillar"&gt;
&lt;h2&gt;ext_pillar&lt;/h2&gt;
&lt;p&gt;Salt支持从第三方系统中获取Pillar信息,使Salt易于与现有的CMDB系统进行数据整合. 对应的配置是master配置文件中的ext_pillar选项. 官方当前已经提供了 &lt;a class="reference external" href="http://docs.saltstack.com/en/latest/ref/pillar/all/"&gt;若干驱动&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;如果已经提供的驱动并不满足需求, 自定义ext_pillar驱动也非常简单. 只需要驱动文件放到master端salt代码中pillar目录下即可, 驱动为python代码, 其中包含ext_pillar函数, 且该函数第一个参数是minion_id, 第二个参数为pillar, 其返回值是一个标准的 &lt;a class="reference external" href="https://docs.python.org/2/tutorial/datastructures.html#dictionaries"&gt;Python字典&lt;/a&gt; 即可. 可以参照 &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/v2014.1.4/salt/pillar/cobbler.py"&gt;cobbler的ext_pillar&lt;/a&gt; 进行编写.&lt;/p&gt;
&lt;/div&gt;
</content><category term="SaltStack"></category><category term="saltstack"></category><category term="pillar"></category></entry><entry><title>基于Salt Event系统构建Master端returner</title><link href="https://pengyao.org/saltstack_master_retuner_over_event_system.html" rel="alternate"></link><published>2014-04-18T00:00:00+08:00</published><updated>2014-04-18T00:00:00+08:00</updated><author><name>pengyao</name></author><id>tag:pengyao.org,2014-04-18:/saltstack_master_retuner_over_event_system.html</id><summary type="html">&lt;p class="first last"&gt;SaltStack的returner是由minion端主动连接returner完成执行结果的存储, 在部分场景下并不能满足需求. 由于Salt底层已经构建了一套Event系统, 所有的操作均会产生event. 因此基于Salt Event System构建Master端returner成为一种可能.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="http://saltstack.com/"&gt;SaltStack&lt;/a&gt; 的 &lt;a class="reference external" href="http://docs.saltstack.com/en/latest/ref/returners/"&gt;returner&lt;/a&gt; 是由minion端主动连接returner完成执行结果的存储, 在部分场景下并不能满足需求. 由于Salt底层已经构建了一套 &lt;a class="reference external" href="http://docs.saltstack.com/en/latest/topics/event/index.html"&gt;Event系统&lt;/a&gt; , 所有的操作均会产生event. 因此基于Salt Event系统构建Master端returner成为一种可能.&lt;/p&gt;
&lt;p&gt;之前已经完成了 &lt;a class="reference external" href="http://pengyao.org/saltstack_event_system_listen_events.html"&gt;SaltStack Event系统监听events测试&lt;/a&gt;, 本文将基于Salt Event系统构建Master端returner.&lt;/p&gt;
&lt;div class="section" id="section-1"&gt;
&lt;h2&gt;前置阅读&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;SaltStack Event系统: &lt;a class="reference external" href="http://docs.saltstack.com/en/latest/topics/event/index.html"&gt;http://docs.saltstack.com/en/latest/topics/event/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SaltStack Event系统监听events测试: &lt;a class="reference external" href="http://pengyao.org/saltstack_event_system_listen_events.html"&gt;http://pengyao.org/saltstack_event_system_listen_events.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="section-2"&gt;
&lt;h2&gt;环境说明&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;测试结构: Master/Minions结构, 共一台minion, 对应id为: &lt;em&gt;salt-minion-01.example.com&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Salt Version: &lt;em&gt;2014.1.1&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;本次测试结果将存放在MySQL中, 为了方便测试, 已经在Master本地部署了MySQL Server&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="section-3"&gt;
&lt;h2&gt;开工&lt;/h2&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;以下操作如非特别注明, 均在Master端进行&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-4"&gt;
&lt;h3&gt;前置配置&lt;/h3&gt;
&lt;p&gt;安装MySQLdb依赖&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum&lt;span class="w"&gt; &lt;/span&gt;-y&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;MySQL-python
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配置本次测试需要使用的数据库及用户&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 创建salt数据库&lt;/span&gt;
mysql&lt;span class="w"&gt; &lt;/span&gt;-e&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;create database salt&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;# 创建用于连接salt数据库的用户&lt;/span&gt;
mysql&lt;span class="w"&gt; &lt;/span&gt;-e&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;grant all on salt.* to salt@localhost identified by &amp;quot;salt_pass&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;# 将数据库配置添加至master配置文件中&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-e&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\n\n# MySQL\nmysql.host: &amp;#39;localhost&amp;#39;\nmysql.user: &amp;#39;salt&amp;#39;\nmysql.pass: &amp;#39;salt_pass&amp;#39;\nmysql.db: &amp;#39;salt&amp;#39;\nmysql.port: 3306&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/etc/salt/master
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为了与salt自带的 &lt;a class="reference external" href="http://docs.saltstack.com/en/latest/ref/returners/all/salt.returners.mysql.html"&gt;mysql returner&lt;/a&gt; 兼容, 本次直接使用mysql retuner对应的数据库表结构:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
USE `salt`;

--
-- Table structure for table `jids`
--

DROP TABLE IF EXISTS `jids`;
CREATE TABLE `jids` (
  `jid` varchar(255) NOT NULL,
  `load` mediumtext NOT NULL,
  UNIQUE KEY `jid` (`jid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Table structure for table `salt_returns`
--

DROP TABLE IF EXISTS `salt_returns`;
CREATE TABLE `salt_returns` (
  `fun` varchar(50) NOT NULL,
  `jid` varchar(255) NOT NULL,
  `return` mediumtext NOT NULL,
  `id` varchar(255) NOT NULL,
  `success` varchar(10) NOT NULL,
  `full_ret` mediumtext NOT NULL,
  `alter_time` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  KEY `id` (`id`),
  KEY `jid` (`jid`),
  KEY `fun` (`fun`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="returner"&gt;
&lt;h3&gt;编写returner&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;salt_event_to_mysql.py&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;#coding=utf8&lt;/span&gt;

&lt;span class="c1"&gt;# Import python libs&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;

&lt;span class="c1"&gt;# Import salt modules&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;salt.config&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;salt.utils.event&lt;/span&gt;

&lt;span class="c1"&gt;# Import third party libs&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;MySQLdb&lt;/span&gt;

&lt;span class="n"&gt;__opts__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/etc/salt/master&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Create MySQL connect&lt;/span&gt;
&lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MySQLdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;__opts__&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mysql.host&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;__opts__&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mysql.user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;passwd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;__opts__&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mysql.pass&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;__opts__&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mysql.db&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;__opts__&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mysql.port&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Listen Salt Master Event System&lt;/span&gt;
&lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MasterEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__opts__&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sock_dir&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;eachevent&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iter_events&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;full&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;eachevent&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;salt/job/&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;eachevent&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tag&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="c1"&gt;# Return Event&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;return&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="c1"&gt;# Igonre saltutil.find_job event&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fun&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;saltutil.find_job&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;

            &lt;span class="n"&gt;sql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;INSERT INTO `salt_returns`&lt;/span&gt;
&lt;span class="s1"&gt;                (`fun`, `jid`, `return`, `id`, `success`, `full_ret` )&lt;/span&gt;
&lt;span class="s1"&gt;                VALUES (&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;)&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
            &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fun&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;jid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                                 &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;return&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                                 &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;success&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
            &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;COMMIT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# Other Event&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行本returner:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;salt_event_to_mysql.py
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="section-5"&gt;
&lt;h3&gt;测试&lt;/h3&gt;
&lt;p&gt;新开启一个终端, 运行Salt指令:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;salt&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;test.ping
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出为:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;salt-minion-01.example.com&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;检查mysql数据库, 查询salt_returns表数据:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysql&lt;span class="w"&gt; &lt;/span&gt;salt&lt;span class="w"&gt; &lt;/span&gt;-e&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;select * from salt_returns\G&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出为:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
*************************** 1. row ***************************
    fun: test.ping
    jid: 20140417161103569310
    return: true
    id: salt-minion-01.example.com
    success: 1
    full_ret: {&amp;quot;fun_args&amp;quot;: [], &amp;quot;jid&amp;quot;: &amp;quot;20140417161103569310&amp;quot;, &amp;quot;return&amp;quot;: true, &amp;quot;retcode&amp;quot;: 0, &amp;quot;success&amp;quot;: true, &amp;quot;cmd&amp;quot;: &amp;quot;_return&amp;quot;, &amp;quot;_stamp&amp;quot;: &amp;quot;2014-04-17T16:11:03.584859&amp;quot;, &amp;quot;fun&amp;quot;: &amp;quot;test.ping&amp;quot;, &amp;quot;id&amp;quot;: &amp;quot;salt-minion-01.example.com&amp;quot;}
    alter_time: 2014-04-17 16:11:03
&lt;/pre&gt;
&lt;p&gt;入库成功&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="SaltStack"></category><category term="saltstack"></category><category term="event system"></category><category term="returner"></category></entry><entry><title>SaltStack Event系统监听events测试</title><link href="https://pengyao.org/saltstack_event_system_listen_events.html" rel="alternate"></link><published>2014-04-17T00:00:00+08:00</published><updated>2014-04-17T00:00:00+08:00</updated><author><name>pengyao</name></author><id>tag:pengyao.org,2014-04-17:/saltstack_event_system_listen_events.html</id><summary type="html">&lt;p class="first last"&gt;SaltStack 0.10版本中, 基于ZeroMQ publish socket, 新增了Event系统, 允许其他进程连接该socket并监听event bus上的events. 本文对SaltStack Event系统进行监听events测试.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;SaltStack 0.10版本中, 新增了Event系统, 官方在 &lt;a class="reference external" href="http://docs.saltstack.com/en/latest/topics/releases/0.10.0.html#event-system"&gt;Release Notes&lt;/a&gt; 对其描述如下:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
The Salt Master now comes equipped with a new event system. This event system has replaced some of the back end of the Salt client and offers the beginning of a system which will make plugging external applications into Salt. The event system relies on a local ZeroMQ publish socket and other processes can connect to this socket and listen for events. The new events can be easily managed via Salt's event library.
&lt;/pre&gt;
&lt;p&gt;同时官方也在 &lt;a class="reference external" href="http://docs.saltstack.com/en/latest/topics/event/index.html#listening-for-events"&gt;Salt Event系统&lt;/a&gt; 页面中提供了监听event的例子程序, 基于其进行下Event系统学习.&lt;/p&gt;
&lt;div class="section" id="section-1"&gt;
&lt;h2&gt;环境说明&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;测试结构: Master/Minions结构, 共一台minion, 对应id为: &lt;em&gt;salt-minion-01.example.com&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Salt Version: &lt;em&gt;2014.1.1&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="section-2"&gt;
&lt;h2&gt;开工&lt;/h2&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;Salt Event系统页面中, 官方强调Event系统可以通过event library访问, 并且只允许和Salt运行的用户访问. 由于运行master时是通过root用户运行, 所以以下操作均在root用户下进行. 如非特别注明, 均在Master端进行操作.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;新开一个终端, 运行python, 基于其尝试监听所有的Event:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;salt.utils.event&lt;/span&gt;

&lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MasterEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/var/run/salt/master&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;eachevent&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iter_events&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;full&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;eachevent&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;------&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在另外一个终端执行:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;salt&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;test.ping
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看之前监听所有Event的终端, 有如下输出:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{'tag': '20140417135823133764', 'data': {'_stamp': '2014-04-17T13:58:23.133956', 'minions': ['salt-minion-01.example.com']}}
------
{'tag': 'new_job', 'data': {'tgt_type': 'glob', 'jid': '20140417135823133764', 'tgt': '*', '_stamp': '2014-04-17T13:58:23.134005', 'user': 'sudo_vagrant', 'arg': [], 'fun': 'test.ping', 'minions': ['salt-minion-01.example.com']}}
------
{'tag': 'salt/job/20140417135823133764/new', 'data': {'tgt_type': 'glob', 'jid': '20140417135823133764', 'tgt': '*', '_stamp': '2014-04-17T13:58:23.134064', 'user': 'sudo_vagrant', 'arg': [], 'fun': 'test.ping', 'minions': ['salt-minion-01.example.com']}}
------
{'tag': '20140417135823133764', 'data': {'fun_args': [], 'jid': '20140417135823133764', 'return': True, 'retcode': 0, 'success': True, 'cmd': '_return', '_stamp': '2014-04-17T13:58:23.150356', 'fun': 'test.ping', 'id': 'salt-minion-01.example.com'}}
------
{'tag': 'salt/job/20140417135823133764/ret/salt-minion-01.example.com', 'data': {'fun_args': [], 'jid': '20140417135823133764', 'return': True, 'retcode': 0, 'success': True, 'cmd': '_return', '_stamp': '2014-04-17T13:58:23.150397', 'fun': 'test.ping', 'id': 'salt-minion-01.example.com'}}
------
&lt;/pre&gt;
&lt;p&gt;从输出结果看, 对于tag只是jid的, 官方在源码中标记的注释是&amp;quot;old dup event&amp;quot;, 推测是为了兼容旧的event系统(0.17.0版本event系统进行了更新), 本次对其不做处理. 下发任务对应的tag为 &lt;em&gt;new_job&lt;/em&gt;, 并且下发任务时就master端就在event中注定了那些minions需要运行(对应的data字典中的minions). 如果tag中包含 &lt;em&gt;salt/job/&lt;/em&gt; 字样并且data字典中 &lt;em&gt;return&lt;/em&gt; 为True, 则表示该Event是minion返回的结果.&lt;/p&gt;
&lt;p&gt;同时测试下超过timeout设置(默认为5秒)的任务:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;salt&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;cmd.run&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sleep 6; echo hello world&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出结果为:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{'tag': '20140417141834578593', 'data': {'_stamp': '2014-04-17T14:18:34.578822', 'minions': ['salt-minion-01.example.com']}}
------
{'tag': 'new_job', 'data': {'tgt_type': 'glob', 'jid': '20140417141834578593', 'tgt': '*', '_stamp': '2014-04-17T14:18:34.578881', 'user': 'sudo_vagrant', 'arg': ['sleep 6; echo hello world'], 'fun': 'cmd.run', 'minions': ['salt-minion-01.example.com']}}
------
{'tag': 'salt/job/20140417141834578593/new', 'data': {'tgt_type': 'glob', 'jid': '20140417141834578593', 'tgt': '*', '_stamp': '2014-04-17T14:18:34.578917', 'user': 'sudo_vagrant', 'arg': ['sleep 6; echo hello world'], 'fun': 'cmd.run', 'minions': ['salt-minion-01.example.com']}}
------
{'tag': '20140417141839587706', 'data': {'_stamp': '2014-04-17T14:18:39.587908', 'minions': ['salt-minion-01.example.com']}}
------
{'tag': 'new_job', 'data': {'tgt_type': 'glob', 'jid': '20140417141839587706', 'tgt': '*', '_stamp': '2014-04-17T14:18:39.587961', 'user': 'sudo_vagrant', 'arg': ['20140417141834578593'], 'fun': 'saltutil.find_job', 'minions': ['salt-minion-01.example.com']}}
------
{'tag': 'salt/job/20140417141839587706/new', 'data': {'tgt_type': 'glob', 'jid': '20140417141839587706', 'tgt': '*', '_stamp': '2014-04-17T14:18:39.587985', 'user': 'sudo_vagrant', 'arg': ['20140417141834578593'], 'fun': 'saltutil.find_job', 'minions': ['salt-minion-01.example.com']}}
------
{'tag': '20140417141839587706', 'data': {'fun_args': ['20140417141834578593'], 'jid': '20140417141839587706', 'return': {'tgt_type': 'glob', 'jid': '20140417141834578593', 'tgt': '*', 'pid': 2143, 'ret': '', 'user': 'sudo_vagrant', 'arg': ['sleep 6; echo hello world'], 'fun': 'cmd.run'}, 'retcode': 0, 'success': True, 'cmd': '_return', '_stamp': '2014-04-17T14:18:39.605262', 'fun': 'saltutil.find_job', 'id': 'salt-minion-01.example.com'}}
------
{'tag': 'salt/job/20140417141839587706/ret/salt-minion-01.example.com', 'data': {'fun_args': ['20140417141834578593'], 'jid': '20140417141839587706', 'return': {'tgt_type': 'glob', 'jid': '20140417141834578593', 'tgt': '*', 'pid': 2143, 'ret': '', 'user': 'sudo_vagrant', 'arg': ['sleep 6; echo hello world'], 'fun': 'cmd.run'}, 'retcode': 0, 'success': True, 'cmd': '_return', '_stamp': '2014-04-17T14:18:39.605321', 'fun': 'saltutil.find_job', 'id': 'salt-minion-01.example.com'}}
------
{'tag': '20140417141834578593', 'data': {'fun_args': ['sleep 6; echo hello world'], 'jid': '20140417141834578593', 'return': 'hello world', 'retcode': 0, 'success': True, 'cmd': '_return', '_stamp': '2014-04-17T14:18:40.604562', 'fun': 'cmd.run', 'id': 'salt-minion-01.example.com'}}
------
{'tag': 'salt/job/20140417141834578593/ret/salt-minion-01.example.com', 'data': {'fun_args': ['sleep 6; echo hello world'], 'jid': '20140417141834578593', 'return': 'hello world', 'retcode': 0, 'success': True, 'cmd': '_return', '_stamp': '2014-04-17T14:18:40.604628', 'fun': 'cmd.run', 'id': 'salt-minion-01.example.com'}}
------
&lt;/pre&gt;
&lt;p&gt;除了之前test.ping测试类似的输出外, 可以看到tag为 &lt;em&gt;new_job&lt;/em&gt; 的event产生后的5秒, 自动产生了一个fun值为 &lt;em&gt;saltutil.find_job&lt;/em&gt;, 其arg为之前new_job的jid的event. 然后minion返回之前运行的fun值为 &lt;em&gt;cmd.run&lt;/em&gt; 对应的进行运行信息(pid等信息, 已确保任务正在被执行).&lt;/p&gt;
&lt;p&gt;Salt对应的处理机制是master在下发指令后,如果在设置的timeout时间内, 所有minion均返回了结果, 则直接退出. 如果达到timeout时间后, 依然有minion没有返回结果, 则自动触发一个 &lt;em&gt;saltutil.find_job&lt;/em&gt; 的任务, 去所有minion上查询该任务是否在执行. 如果minion返回任务当前正在执行中, 则等待一个新的timeout周期, 如果期间所有minion均返回了结果, 则退出;  依次类推, 一直等到直到所有minion均返回结果. 如果期间在触发 &lt;em&gt;saltutil.find_job&lt;/em&gt; 时minion并没有返回任务的执行状况, 且之前并没有返回结果, 则认为minion出现问题, 就会输出&amp;quot;Minion did not return&amp;quot; 字样(可以通过salt -v参数查询到).&lt;/p&gt;
&lt;p&gt;从该机制中可以知道, 如果经常出现minion无法返回结果的情况, 对于某些场景如规模较大或minion高负载的情况下, 达到设置的timeout时间时, 自动触发 &lt;em&gt;saltutil.find_job&lt;/em&gt; 任务, 而minion此时并没有开始运行之前下发的任务. 导致master直接认为&amp;quot;Minion did not return&amp;quot;. 此时需要增大timeout的值(可以修改master的配置文件中的timeout选项)&lt;/p&gt;
&lt;p&gt;同时由于master会自动触发 &lt;em&gt;saltutil.find_job&lt;/em&gt; 任务, 而该任务也会记入Event系统, 所以对于如Halite等第三方系统, 执行长时间的任务时, 你会发现大量的 &lt;em&gt;saltutil.find_job&lt;/em&gt; 操作, 此为正常现象, 无需处理(当然, 有洁癖的同学可能会不爽).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-3"&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;Salt提供了强大的Event系统, 第三方程序可以轻松插入Event系统, 捕获当前Salt的运行状态, 易于扩展Salt功能.&lt;/p&gt;
&lt;/div&gt;
</content><category term="SaltStack"></category><category term="saltstack"></category><category term="event system"></category><category term="event系统"></category><category term="监听events"></category></entry><entry><title>ntpq peers字段说明</title><link href="https://pengyao.org/ntpq-peers.html" rel="alternate"></link><published>2014-03-03T00:00:00+08:00</published><updated>2014-03-03T00:00:00+08:00</updated><author><name>pengyao</name></author><id>tag:pengyao.org,2014-03-03:/ntpq-peers.html</id><summary type="html">&lt;p class="first last"&gt;服务器为了保持时间的统一, 经常会部署ntpd服务. 经常使用 &lt;tt class="docutils literal"&gt;ntpq &lt;span class="pre"&gt;-p&lt;/span&gt;&lt;/tt&gt; 来查看ntpd peers的运行状态信息, 但其输出中的各个字段是什么含义哪?&lt;/p&gt;
</summary><content type="html">&lt;p&gt;服务器为了保持时间的统一, 会部署NTPD来进行时间的同步. 对于ntpd当前的状态, 经常会通过 &lt;tt class="docutils literal"&gt;ntpq &lt;span class="pre"&gt;-p&lt;/span&gt;&lt;/tt&gt; 或 通过 &lt;tt class="docutils literal"&gt;ntpq&lt;/tt&gt; 的console使用 &lt;tt class="docutils literal"&gt;peers&lt;/tt&gt; 来进行查看. 输出以下类似结果:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
     remote           refid      st t when poll reach   delay   offset  jitter
==============================================================================
+42.96.167.209   202.118.1.46     2 u   32   64  377   19.047   19.838  38.791
*dns1.synet.edu. 202.118.1.46     2 u   16   64  377  120.494   48.096  25.146
+114.113.198.166 202.118.1.46     2 u   24   64  377   29.381    9.855  24.694
+61.135.250.78   223.255.185.2    2 u   24   64  377    4.793   30.086  20.347
&lt;/pre&gt;
&lt;p&gt;那么每个字段代表什么含义哪?&lt;/p&gt;
&lt;div class="section" id="section-1"&gt;
&lt;h2&gt;字段含义&lt;/h2&gt;
&lt;div class="section" id="tally"&gt;
&lt;h3&gt;tally&lt;/h3&gt;
&lt;p&gt;single-character code indicating current value of the select field of the peer status word&lt;/p&gt;
&lt;p&gt;在每个peer最前边的一个标签字符串, 用来表示该peer的select状态.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;*&lt;/tt&gt; : sys.peer, 表示该peer已标记为system peer, 以其变量作为系统变量.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;+&lt;/tt&gt; : candidat, 表示该peer存活并且作为候选peer.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;-&lt;/tt&gt; : outlyer, 表示该peer已经被ntp cluster算法标记为偏远的peer.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;#&lt;/tt&gt; : selected, 表示该peer存活, 但并不在前六个同步peer的范围内.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;.&lt;/tt&gt; : excess, 表示该peer不在前十个同步peer的范围内.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;o&lt;/tt&gt; : pps.peer, The peer has been declared the system peer and lends its variables to thesystem variables. However, the actual system synchronization is derived from a pulse-per-second (PPS) signal, either indirectly via the PPS reference clock driver or directly via kernel interface.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;x&lt;/tt&gt; : falsetick, The peer is discarded by the intersection algorithm as a falseticker.&lt;/li&gt;
&lt;li&gt;空字符: space reject, 表示该peer标记为不可达.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="remote"&gt;
&lt;h3&gt;remote&lt;/h3&gt;
&lt;p&gt;host name (or IP number) of peer&lt;/p&gt;
&lt;p&gt;该peer的主机名或IP地址, 可以在运行 &lt;tt class="docutils literal"&gt;ntp&lt;/tt&gt; 命令时使用 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-n&lt;/span&gt;&lt;/tt&gt; 选项来不进行DNS解析, 直接显示为IP地址&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="refid"&gt;
&lt;h3&gt;refid&lt;/h3&gt;
&lt;p&gt;association ID or kiss code&lt;/p&gt;
&lt;p&gt;该peer的关联ID, 及该peer自身的 system.peer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="st"&gt;
&lt;h3&gt;st&lt;/h3&gt;
&lt;p&gt;stratum&lt;/p&gt;
&lt;p&gt;该peer在NTP结构中的层级. NTP为层级结构, 数字越小表示其层级越高, 有效值是0到15.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="t"&gt;
&lt;h3&gt;t&lt;/h3&gt;
&lt;p&gt;type&lt;/p&gt;
&lt;p&gt;peer类型. &lt;tt class="docutils literal"&gt;u&lt;/tt&gt; 为单播(unicast), &lt;tt class="docutils literal"&gt;b&lt;/tt&gt; 为广播(broadcast), &lt;tt class="docutils literal"&gt;l&lt;/tt&gt; 为本地(local).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="when"&gt;
&lt;h3&gt;when&lt;/h3&gt;
&lt;p&gt;sec/min/hr since last received packet&lt;/p&gt;
&lt;p&gt;上次收到的该peer的ntp回应包距当前的时间.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="poll"&gt;
&lt;h3&gt;poll&lt;/h3&gt;
&lt;p&gt;poll interval&lt;/p&gt;
&lt;p&gt;查询间隔, 单位为秒. ntp算法会基于该peer的时间状况对该peer的查询间隔进行动态调整. 如果该peer的时间状态良好, 会在同步过程中加大该同步间隔, 反之则减小查询间隔. 在CentOS 6系统中, 默认的该查询间隔的最小值是64s, 最大值是1024s.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reach"&gt;
&lt;h3&gt;reach&lt;/h3&gt;
&lt;p&gt;reach shift register (octal)&lt;/p&gt;
&lt;p&gt;标记该peer的reach计数, 该值是8进制数.&lt;/p&gt;
&lt;p&gt;该值是写本文的直接原因, 因为发现之对该值的理解是错误的. 之前的理解是参照 &lt;a class="reference external" href="http://linux.vbird.org/linux_server/0440ntp.php#server_start"&gt;鸟哥书中的描述&lt;/a&gt; , &lt;em&gt;已經向上層 NTP 伺服器要求更新的次數&lt;/em&gt;. 而实际上该值并不是计数器, 而是表示最近八次ntp查询的reach状态.&lt;/p&gt;
&lt;p&gt;该值为8进制数, 由三个数组组成, 每个八进制对应3比特. 起始值是0, 之后的比特将每次进行完pool之后左移一位(如果收到ntp回应,则设置为1, 反之为0)&lt;/p&gt;
&lt;p&gt;因此通常启动时, 该值的变化为: 0, 1, 3, 17, 37, 77, 177, 377&lt;/p&gt;
&lt;p&gt;以本文中输出为例, 377八进制数换算成2进制为11111111, 即最近八次查询均可达.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="delay"&gt;
&lt;h3&gt;delay&lt;/h3&gt;
&lt;p&gt;roundtrip delay&lt;/p&gt;
&lt;p&gt;查询往返延迟, 单位是毫秒(milliseconds)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="offset"&gt;
&lt;h3&gt;offset&lt;/h3&gt;
&lt;p&gt;offset&lt;/p&gt;
&lt;p&gt;peer与本机时间偏差, 单位为毫秒(milliseconds)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="jitter"&gt;
&lt;h3&gt;jitter&lt;/h3&gt;
&lt;p&gt;jitter&lt;/p&gt;
&lt;p&gt;尚未学习该字段含义&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="section-2"&gt;
&lt;h2&gt;参考链接&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;ntpq手册: &lt;tt class="docutils literal"&gt;man ntpq&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;ntp手册: &lt;a class="reference external" href="http://doc.ntp.org/4.2.0/ntpq.html"&gt;http://doc.ntp.org/4.2.0/ntpq.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;NTP协议: &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Network_Time_Protocol"&gt;http://en.wikipedia.org/wiki/Network_Time_Protocol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;NTP Debugging Techniques: &lt;a class="reference external" href="http://www.fifi.org/doc/ntp-doc/html/debug.htm"&gt;http://www.fifi.org/doc/ntp-doc/html/debug.htm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="ntp"></category><category term="ntp"></category><category term="nptq"></category><category term="peers"></category></entry><entry><title>Salt整合reclass测试</title><link href="https://pengyao.org/reclass-salt-01.html" rel="alternate"></link><published>2014-02-17T00:00:00+08:00</published><updated>2014-02-17T00:00:00+08:00</updated><author><name>pengyao</name></author><id>tag:pengyao.org,2014-02-17:/reclass-salt-01.html</id><summary type="html">&lt;p class="first last"&gt;reclass是一个外部节点分类器(External Node Classifier, ENC), 可以与自动化管理工具如PUPPET, Salt及Ansible进行整合. 就对reclass进行下学习, 看能为Salt带来什么.&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="reclass"&gt;
&lt;h2&gt;reclass基本介绍&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;项目地址: &lt;a class="reference external" href="https://github.com/madduck/reclass/tree"&gt;https://github.com/madduck/reclass/tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;手册地址: &lt;a class="reference external" href="http://reclass.pantsfullofunix.net/index.html"&gt;http://reclass.pantsfullofunix.net/index.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;reclass, 全称Recursive External Node Classification, 可以与自动化管理工具结合, 为其提供ENC服务. reclass作者认为, ENC软件应该提供如下两个功能:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;提供组(group)中节点(node)及组关系(group memberships)的信息&lt;/li&gt;
&lt;li&gt;提供节点指定的信息, 如变量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对此, reclass定义了如下四种元素:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="16%" /&gt;
&lt;col width="84%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;元素&lt;/td&gt;
&lt;td&gt;描述&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;node&lt;/td&gt;
&lt;td&gt;一个节点, 通常是一个计算机&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;class&lt;/td&gt;
&lt;td&gt;一个分类(categroy),tag,特性(feature)或角色(role), 支持嵌套和继承&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;application&lt;/td&gt;
&lt;td&gt;一组行为(behaviour)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;parameter&lt;/td&gt;
&lt;td&gt;节点指定的变量,可以通过class进行继承&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;reclass在继承中, 如果parent中变量不存在, 则新增,如果存在同一变量, 类型为字符串, 则会进行覆盖. 如果变量为list类型, 则进行追加&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reclass-1"&gt;
&lt;h2&gt;reclass安装&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;clone&lt;span class="w"&gt; &lt;/span&gt;https://github.com/madduck/reclass.git
&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;reclass
python&lt;span class="w"&gt; &lt;/span&gt;setup.py&lt;span class="w"&gt; &lt;/span&gt;install
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="reclass-2"&gt;
&lt;h2&gt;reclass配置及测试&lt;/h2&gt;
&lt;p&gt;测试目标: 通过reclass实现ntp变量的灵活扩展&lt;/p&gt;
&lt;p&gt;通用信息, &lt;em&gt;/srv/reclass/classes/ntp-common.yml&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;ntp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;ntpserver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;0.asia.pool.ntp.org&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;1.asia.pool.ntp.org&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;redhat系统继承ntp-common并进行一些特殊定制, &lt;em&gt;/srv/reclass/classes/ntp-redhat.yml&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;classes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ntp-common&lt;/span&gt;

&lt;span class="nt"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;ntp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;pkg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ntp&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;service&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ntpd&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;ntpserver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;2.asia.pool.ntp.org&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;3.asia.pool.ntp.org&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配置node, &lt;em&gt;/srv/reclass/nodes/salt-minion-01.yml&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;classes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ntp-redhat&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试节点分类信息&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;reclass&lt;span class="w"&gt; &lt;/span&gt;-b&lt;span class="w"&gt; &lt;/span&gt;/srv/reclass&lt;span class="w"&gt; &lt;/span&gt;--nodeinfo&lt;span class="w"&gt; &lt;/span&gt;salt-minion-01
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出结果&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;__reclass__&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;base&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;salt-minion-01&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;salt-minion-01&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Mon Feb 17 09:29:53 2014&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;yaml_fs:///srv/reclass/nodes/salt-minion-01.yml&lt;/span&gt;
&lt;span class="nt"&gt;applications&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[]&lt;/span&gt;
&lt;span class="nt"&gt;classes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ntp-common&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ntp-redhat&lt;/span&gt;
&lt;span class="nt"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;base&lt;/span&gt;
&lt;span class="nt"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;ntp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;ntpserver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;0.asia.pool.ntp.org&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;1.asia.pool.ntp.org&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;2.asia.pool.ntp.org&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;3.asia.pool.ntp.org&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;pkg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ntp&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;service&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ntpd&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从输出结果看, 与reclass手册描述一致&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reclasssalt"&gt;
&lt;h2&gt;reclass与salt整合测试&lt;/h2&gt;
&lt;p&gt;Salt在0.17版本中,增加了 &lt;a class="reference external" href="http://docs.saltstack.com/ref/tops/all/salt.tops.reclass_adapter.html"&gt;reclass的支持&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Salt与reclass元素对应关系&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="43%" /&gt;
&lt;col width="57%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;reclass元素&lt;/td&gt;
&lt;td&gt;Salt术语&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;nodes&lt;/td&gt;
&lt;td&gt;hosts&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;classes&lt;/td&gt;
&lt;td&gt;(none)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;applications&lt;/td&gt;
&lt;td&gt;states&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;parameters&lt;/td&gt;
&lt;td&gt;pillar&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;测试目标: 通过reclass为salt minion提供对应的ntp pillar信息&lt;/p&gt;
&lt;p&gt;测试环境: Salt Master/Minion结构, 版本0.17.5&lt;/p&gt;
&lt;p&gt;配置salt master, &lt;em&gt;/etc/salt/master&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nn"&gt;...&lt;/span&gt;
&lt;span class="nt"&gt;reclass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;&amp;amp;reclass&lt;/span&gt;
&lt;span class="nt"&gt;storage_type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;yaml_fs&lt;/span&gt;
&lt;span class="nt"&gt;inventory_base_uri&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;/srv/reclass&lt;/span&gt;

&lt;span class="nt"&gt;master_tops&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;reclass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;*reclass&lt;/span&gt;

&lt;span class="nt"&gt;ext_pillar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;reclass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;*reclass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;重启salt master&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;service&lt;span class="w"&gt; &lt;/span&gt;salt-master&lt;span class="w"&gt; &lt;/span&gt;restart
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试salt-minion-01对应的ntp pillar&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;salt&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;salt-minion-01&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;pillar.item&lt;span class="w"&gt; &lt;/span&gt;ntp
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出结果&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;salt-minion-01&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;----------&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ntp&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;----------&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ntpserver&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;0.asia.pool.ntp.org&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;1.asia.pool.ntp.org&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;2.asia.pool.ntp.org&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;3.asia.pool.ntp.org&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;pkg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ntp&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;service&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ntpd&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;达成测试目标&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-1"&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;salt pillar当前较弱, 只支持include, 并不支持extend等更高级的功能. 通过与reclass的整合, 借助reclass灵活的继承功能(支持多级继承), 为Salt提供专业的ENC服务, 弥补了pillar的不足.&lt;/p&gt;
&lt;p&gt;当前reclass的功能相对较弱, 不过可以看到的是如Class subdirectories这类实用的功能已经在to-do list中, 期待reclass功能更为强大.&lt;/p&gt;
&lt;/div&gt;
</content><category term="SaltStack"></category><category term="配置管理"></category><category term="ENC"></category><category term="reclass"></category><category term="saltstack"></category></entry><entry><title>Salt配置复杂nodegroup</title><link href="https://pengyao.org/salt-nodegroup-complex.html" rel="alternate"></link><published>2014-01-16T00:00:00+08:00</published><updated>2014-01-16T00:00:00+08:00</updated><author><name>pengyao</name></author><id>tag:pengyao.org,2014-01-16:/salt-nodegroup-complex.html</id><summary type="html">&lt;p class="first last"&gt;&lt;a class="reference external" href="http://saltstack.com/"&gt;SaltStack&lt;/a&gt; 支持Nodegroup嵌套Nodegroup, 进而实现复杂Nodegroup&lt;/p&gt;
</summary><content type="html">&lt;p&gt;昨天拉风在群里问, 定义了A, B两个nodegroup,  是否可以定义一个nodegroup C, 包含A, B两个group, 实现nodegroup嵌套nodegroup进而实现复杂nodegroup(哈哈,各种绕口)&lt;/p&gt;
&lt;p&gt;由于手册中并没有相关介绍, 就查询了下官方的issue, 找到了之前有人反馈过的 &lt;a class="reference external" href="https://github.com/saltstack/salt/issues/2020"&gt;issue #2020&lt;/a&gt; , tom说0.10.4已经实现了这个功能, 就在测试环境进行了测试:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;/etc/salt/master.d/nodegroups.conf&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;nodegroups&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;test1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;L@salt-minion-01&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;test2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;L@salt-minion-02&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;N@test1&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;or&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;N@test2’&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;salt&lt;span class="w"&gt; &lt;/span&gt;-N&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;test.ping
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出结果:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;salt-minion-01&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;True&lt;/span&gt;
&lt;span class="nt"&gt;salt-minion-02&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从输出来看, nodegroup嵌套是支持的&lt;/p&gt;
</content><category term="SaltStack"></category><category term="saltstack"></category><category term="nodegroup"></category></entry><entry><title>Tomcat Manager Text API测试</title><link href="https://pengyao.org/tomcat-manager-text-api-test.html" rel="alternate"></link><published>2013-12-26T00:00:00+08:00</published><updated>2013-12-26T00:00:00+08:00</updated><author><name>pengyao</name></author><id>tag:pengyao.org,2013-12-26:/tomcat-manager-text-api-test.html</id><summary type="html">&lt;p class="first last"&gt;Tomcat Manager提供应用的状态查询,部署,维护等功能. 同时提供有Text API接口,对其进行基本测试.&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="section-1"&gt;
&lt;h2&gt;基本介绍&lt;/h2&gt;
&lt;p&gt;Tomcat Manager提供应用的状态查询, 部署, 维护等功能,  使用方法请参考: &lt;a class="reference external" href="http://tomcat.apache.org/tomcat-7.0-doc/manager-howto.html"&gt;Tomcat Manager HowTo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对Tomcat Manager的Text接口进行了测试, 附上测试用例及结果分析&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-2"&gt;
&lt;h2&gt;环境说明&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Tomcat: 7.0.49&lt;/li&gt;
&lt;li&gt;Manager URL: &lt;a class="reference external" href="http://127.0.0.1:8080/manager/"&gt;http://127.0.0.1:8080/manager/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;测试工具: curl&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="manager"&gt;
&lt;h2&gt;manager访问控制配置&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;${CATALINA_BASE}/conf/tomcat-users.xml&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;......
&lt;span class="nt"&gt;&amp;lt;tomcat-users&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;user&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;username=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pengyao&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;password=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pengyao_pass&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;roles=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;manager-script&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/tomcat-users&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;${CATALINA_BASE}/conf/Catalina/localhost/manager.xml&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;Context&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;privileged=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;antiResourceLocking=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;false&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="na"&gt;docBase=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;${catalina.home}/webapps/manager&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;Valve&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;className=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;org.apache.catalina.valves.RemoteAddrValve&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;allow=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/Context&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;配置完成后需要重启Tomcat&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="section-3"&gt;
&lt;h2&gt;测试&lt;/h2&gt;
&lt;div class="section" id="section-4"&gt;
&lt;h3&gt;查询服务信息&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Request:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl&lt;span class="w"&gt; &lt;/span&gt;-u&lt;span class="w"&gt; &lt;/span&gt;pengyao:pengyao_pass&lt;span class="w"&gt; &lt;/span&gt;http://127.0.0.1:8080/manager/text/serverinfo
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Response:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
OK - Server info
Tomcat Version: Apache Tomcat/7.0.47
OS Name: Linux
OS Version: 2.6.32-358.11.1.el6.x86_64
OS Architecture: amd64
JVM Version: 1.6.0_45-b06
JVM Vendor: Sun Microsystems Inc.
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="section-5"&gt;
&lt;h3&gt;获取当前已部署应用列表&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Request:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl&lt;span class="w"&gt; &lt;/span&gt;-u&lt;span class="w"&gt; &lt;/span&gt;pengyao:pengyao_pass&lt;span class="w"&gt; &lt;/span&gt;http://127.0.0.1:8080/manager/text/list
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Response:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
OK - Listed applications for virtual host localhost
/:running:0:ROOT
/manager:running:6:manager
/docs:running:0:docs
/examples:running:0:examples
/host-manager:running:0:host-manager
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;结果以冒号做分隔, 第一列为context path, 第二列为当前应用的状态, 第三列为当前活跃的session数, 第四列为appBase&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sessionssessions"&gt;
&lt;h3&gt;获取应用sessions设置及当前sessions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Request:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl&lt;span class="w"&gt; &lt;/span&gt;-u&lt;span class="w"&gt; &lt;/span&gt;pengyao:pengyao_pass&lt;span class="w"&gt; &lt;/span&gt;http://127.0.0.1:8080/manager/text/sessions?path&lt;span class="o"&gt;=&lt;/span&gt;/manager
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Response:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
OK - Session information for application at context path /manager
Default maximum session inactive interval 30 minutes
24 - &amp;lt;25 minutes: 1 sessions
26 - &amp;lt;27 minutes: 1 sessions
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="section-6"&gt;
&lt;h3&gt;启动应用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Request:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl&lt;span class="w"&gt; &lt;/span&gt;-u&lt;span class="w"&gt; &lt;/span&gt;pengyao:pengyao_pass&lt;span class="w"&gt; &lt;/span&gt;http://127.0.0.1:8080/manager/text/start?path&lt;span class="o"&gt;=&lt;/span&gt;/examples
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Response:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
OK - Started application at context path /examples
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果指定的path(context path)不存在, 则报错:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
FAIL - No context exists for path /pengyao
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="section-7"&gt;
&lt;h3&gt;关闭应用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Request:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl&lt;span class="w"&gt; &lt;/span&gt;-u&lt;span class="w"&gt; &lt;/span&gt;pengyao:pengyao_pass&lt;span class="w"&gt; &lt;/span&gt;http://127.0.0.1:8080/manager/text/stop?path&lt;span class="o"&gt;=&lt;/span&gt;/examples
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Response:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
OK - Stopped application at context path /examples
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="section-8"&gt;
&lt;h3&gt;重启应用&lt;/h3&gt;
&lt;p&gt;主要应用于更新了类或jar, 但没有配置 &lt;em&gt;reloadable&lt;/em&gt;, 需要手动进行重启应用, 以使其生效&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Request:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl&lt;span class="w"&gt; &lt;/span&gt;-u&lt;span class="w"&gt; &lt;/span&gt;pengyao:pengyao_pass&lt;span class="w"&gt; &lt;/span&gt;http://127.0.0.1:8080/manager/text/reload?path&lt;span class="o"&gt;=&lt;/span&gt;/examples
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Response:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
OK - Reloaded application at context path /examples
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果应用reload前并不处于running状态, 则会报错:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
FAIL - Encountered exception java.lang.IllegalStateException: Context with name [/examples] has not yet been started
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="section-9"&gt;
&lt;h3&gt;卸载应用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;注意: 该操作将会删除 appBase及对应的war包, 请谨慎使用. 如果只是想暂停某应用, 请使用 &lt;strong&gt;关闭应用(stop)&lt;/strong&gt; 方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Request:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl&lt;span class="w"&gt; &lt;/span&gt;-u&lt;span class="w"&gt; &lt;/span&gt;pengyao:pengyao_pass&lt;span class="w"&gt; &lt;/span&gt;http://127.0.0.1:8080/manager/text/undeploy?path&lt;span class="o"&gt;=&lt;/span&gt;/examples
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Response:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
OK - Undeployed application at context path /examples
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果应用不存在,则报错:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
FAIL - No context exists for path /pengyao
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="section-10"&gt;
&lt;h3&gt;部署应用&lt;/h3&gt;
&lt;p&gt;下载测试用例:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget&lt;span class="w"&gt; &lt;/span&gt;http://tomcat.apache.org/tomcat-6.0-doc/appdev/sample/sample.war&lt;span class="w"&gt; &lt;/span&gt;-O&lt;span class="w"&gt; &lt;/span&gt;/tmp/sample.war
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;以PUT方式上传war包部署应用&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Request:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl&lt;span class="w"&gt; &lt;/span&gt;-u&lt;span class="w"&gt; &lt;/span&gt;pengyao:pengyao_pass&lt;span class="w"&gt; &lt;/span&gt;-T&lt;span class="w"&gt; &lt;/span&gt;/tmp/sample.war&lt;span class="w"&gt;  &lt;/span&gt;http://127.0.0.1:8080/manager/text/deploy?path&lt;span class="o"&gt;=&lt;/span&gt;/sample
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Response:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
OK - Deployed application at context path /sample
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此时将能在${CATALINA_BASE}/webapps/下找到sample.war 及 sample目录&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;以本地(Tomcat Server本地)war包部署应用&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Request:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl&lt;span class="w"&gt; &lt;/span&gt;-u&lt;span class="w"&gt; &lt;/span&gt;pengyao:pengyao_pass&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://127.0.0.1:8080/manager/text/deploy?path=/foo&amp;amp;war=file:/tmp/sample.war&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Response:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
OK - Deployed application at context path /foo
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此时将能在${CATALINA_BASE}/webapps/下找到foo.war 及 foo目录&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="WebServer"></category><category term="webserver"></category><category term="tomcat"></category><category term="manager"></category><category term="字符接口"></category><category term="api"></category></entry><entry><title>CentOS平台上如何加入World Community Grid参与运算</title><link href="https://pengyao.org/howto_join_world_community_grid_on_centos.html" rel="alternate"></link><published>2013-12-10T00:00:00+08:00</published><updated>2013-12-10T00:00:00+08:00</updated><author><name>pengyao</name></author><id>tag:pengyao.org,2013-12-10:/howto_join_world_community_grid_on_centos.html</id><summary type="html">&lt;p class="first last"&gt;&lt;a class="reference external" href="http://www.worldcommunitygrid.org/"&gt;World Community Grid&lt;/a&gt; 是一项基于互联网的公益性分布式计算项目，该项目联合分布在各地的自愿者们提供的计算资源，用于一些能够为全人类带来福音的大型科技研究项目。 当手头有CentOS操作系统的计算资源，安装上 &lt;a class="reference external" href="http://boinc.berkeley.edu/"&gt;Boinc&lt;/a&gt; client, 进行简单配置即可参与计算。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="http://www.wikipedia.org/"&gt;Wikipedia&lt;/a&gt; 对 &lt;a class="reference external" href="http://zh.wikipedia.org/wiki/%E4%B8%96%E7%95%8C%E5%85%AC%E5%85%B1%E7%BD%91%E6%A0%BC"&gt;World Communtiy Grid&lt;/a&gt; 有如下描述:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
World Community Grid，中文译名为“世界社群网格”、“世界共同体网格计划”或“世界公共网格”。是由IBM公司主持的一项基于互联网的公益性分布式计算项目，开始于2004年11月16日。该项目将联合分布于世界各地的志愿者们提供的计算资源，用于一些能为全人类带来福音的大型科学研究项目。

World Community Grid 创立之初是基于 Grid.org 的平台搭建的，之后于 2007 年开始全面迁移至开源的 BOINC 平台。World Community Grid 在底层计算平台的基础上，为具体的计算项目提供了一个更高层次的计算平台。
&lt;/pre&gt;
&lt;p&gt;如果手头刚好有空闲的计算资源, 只需要安装上 &lt;a class="reference external" href="http://boinc.berkeley.edu/"&gt;Boinc&lt;/a&gt; client，进行简单的配置即可参与计算，贡献自己的一份力量,本文以 &lt;a class="reference external" href="http://www.centos.org/"&gt;CentOS&lt;/a&gt; 为例进行说明。&lt;/p&gt;
&lt;div class="section" id="world-community-grid"&gt;
&lt;h2&gt;注册World Community Grid账户&lt;/h2&gt;
&lt;p&gt;访问 &lt;a class="reference external" href="https://secure.worldcommunitygrid.org/reg/viewRegister.do"&gt;World Community Grid 注册URL&lt;/a&gt; 进行账户注册。注册完毕后，可以在 &lt;em&gt;settings&lt;/em&gt; 中设置参与哪些项目的运算，并在My Profile页面获取到 &lt;em&gt;Weak Account Key&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="boinc-client"&gt;
&lt;h2&gt;安装配置Boinc Client&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://fedoraproject.org/wiki/EPEL/zh-cn"&gt;EPEL&lt;/a&gt; 中已经有了 &lt;a class="reference external" href="http://boinc.berkeley.edu/"&gt;Boinc&lt;/a&gt; client软件包，直接进行安装。如果你还没有安装EPEL，请在进行以下操作前先进行EPEL的安装。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;安装boinc-client&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;boinc-client
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;配置boinc-client&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;BOINCOPTS=&amp;quot;--daemon --attach_project www.worldcommunitygrid.org/ weak_account_key&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;/etc/sysconfig/boinc-client
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;请将命令中的 &lt;em&gt;weak_account_key&lt;/em&gt; 替换为之前在My Profile页面获取到的 &lt;em&gt;Weak Account Key&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;启动boinc-client&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chkconfig&lt;span class="w"&gt; &lt;/span&gt;boinc-client&lt;span class="w"&gt; &lt;/span&gt;on
service&lt;span class="w"&gt; &lt;/span&gt;boinc-client&lt;span class="w"&gt; &lt;/span&gt;start
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="section-1"&gt;
&lt;h2&gt;查看已参与运算的设备信息&lt;/h2&gt;
&lt;p&gt;安装配置boinc-client并运行后，访问 &lt;a class="reference external" href="http://www.worldcommunitygrid.org/"&gt;World Community Grid&lt;/a&gt; 的 &lt;a class="reference external" href="https://secure.worldcommunitygrid.org/ms/device/viewDevices.do"&gt;Device Manager&lt;/a&gt; 即可查询到当前已参与运算的设备信息。&lt;/p&gt;
&lt;p&gt;Technology solving problems!&lt;/p&gt;
&lt;/div&gt;
</content><category term="Public_Welfare"></category><category term="CentOS"></category><category term="EPEL"></category><category term="World Community Grid"></category><category term="世界公共网格"></category><category term="boinc"></category></entry><entry><title>Salt-API安装配置及使用</title><link href="https://pengyao.org/salt-api-deploy-and-use.html" rel="alternate"></link><published>2013-11-27T00:00:00+08:00</published><updated>2013-11-27T00:00:00+08:00</updated><author><name>pengyao</name></author><id>tag:pengyao.org,2013-11-27:/salt-api-deploy-and-use.html</id><summary type="html">&lt;p class="first last"&gt;&lt;a class="reference external" href="http://saltstack.com/"&gt;SaltStack&lt;/a&gt; 官方提供有REST API格式的 &lt;a class="reference external" href="https://github.com/saltstack/salt-api"&gt;salt-api&lt;/a&gt; 项目, 与第三方系统集成将变得非常简单。 本文将讲述如何安装配置及使用Salt-API。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="http://saltstack.com/"&gt;SaltStack&lt;/a&gt; 官方提供有REST API格式的 &lt;a class="reference external" href="https://github.com/saltstack/salt-api"&gt;salt-api&lt;/a&gt; 项目，将使Salt与第三方系统集成变得尤为简单。本文讲带你了解如何安装配置Salt-API, 如何利用Salt-API获取想要的信息。&lt;/p&gt;
&lt;div class="section" id="section-1"&gt;
&lt;h2&gt;前置阅读&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://salt-api.readthedocs.org/en/latest/"&gt;salt-api手册&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docs.saltstack.com/topics/eauth/index.html"&gt;Salt External Authentication System&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="section-2"&gt;
&lt;h2&gt;环境说明&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;操作系统环境: CentOS 6.4，已配置EPEL源&lt;/li&gt;
&lt;li&gt;Salt Master/Minion版本: 0.17.2, Master IP地址为 &lt;em&gt;192.168.3&lt;/em&gt;, 用于本次测试的Minion ID为 &lt;em&gt;minion-01.example.com&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="section-3"&gt;
&lt;h2&gt;开工&lt;/h2&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;以下操作如非特别注明，均在Master上进行&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="salt-api-1"&gt;
&lt;h3&gt;安装Salt-API&lt;/h3&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;当前EPEL中的salt-api版本为0.8.2, 存在几处bug, 本文讲使用pip方式安装0.8.3版本&lt;/p&gt;
&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 安装salt-api&lt;/span&gt;
pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;salt-api

&lt;span class="c1"&gt;# 下载服务维护脚本&lt;/span&gt;
wget&lt;span class="w"&gt; &lt;/span&gt;https://raw.github.com/saltstack/salt-api/develop/pkg/rpm/salt-api&lt;span class="w"&gt; &lt;/span&gt;-O&lt;span class="w"&gt; &lt;/span&gt;/etc/init.d/salt-api
chmod&lt;span class="w"&gt; &lt;/span&gt;+x&lt;span class="w"&gt; &lt;/span&gt;/etc/init.d/salt-api
chkconfig&lt;span class="w"&gt; &lt;/span&gt;salt-api&lt;span class="w"&gt; &lt;/span&gt;on
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="salt-api-2"&gt;
&lt;h3&gt;配置Salt-API&lt;/h3&gt;
&lt;div class="section" id="ssl"&gt;
&lt;h4&gt;生成自签名证书(用于ssl)&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;/etc/pki/tls/certs
&lt;span class="c1"&gt;# 生成自签名证书, 过程中需要输入key密码及RDNs&lt;/span&gt;
make&lt;span class="w"&gt; &lt;/span&gt;testcert
&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/etc/pki/tls/private/
&lt;span class="c1"&gt;# 解密key文件，生成无密码的key文件, 过程中需要输入key密码，该密码为之前生成证书时设置的密码&lt;/span&gt;
openssl&lt;span class="w"&gt; &lt;/span&gt;rsa&lt;span class="w"&gt; &lt;/span&gt;-in&lt;span class="w"&gt; &lt;/span&gt;localhost.key&lt;span class="w"&gt; &lt;/span&gt;-out&lt;span class="w"&gt; &lt;/span&gt;localhost_nopass.key
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="salt-api-3"&gt;
&lt;h4&gt;Salt-API配置&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;创建用于salt-api的用户&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;useradd&lt;span class="w"&gt; &lt;/span&gt;-M&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;/sbin/nologin&lt;span class="w"&gt; &lt;/span&gt;pengyao
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pengyao_pass&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;passwd&lt;span class="w"&gt; &lt;/span&gt;pengyao&lt;span class="w"&gt; &lt;/span&gt;—stdin
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;配置eauth, &lt;em&gt;/etc/salt/master.d/eauth.conf&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;external_auth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;pam&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;pengyao&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;.*&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;@wheel&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;@runner&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;配置Salt-API, &lt;em&gt;/etc/salt/master.d/api.conf&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;rest_cherrypy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;8000&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;ssl_crt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;/etc/pki/tls/certs/localhost.crt&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;ssl_key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;/etc/pki/tls/private/localhost_nopass.key&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;启动Salt-API&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;service&lt;span class="w"&gt; &lt;/span&gt;salt-api&lt;span class="w"&gt; &lt;/span&gt;start
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="salt-api-4"&gt;
&lt;h2&gt;Salt-API使用&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;测试工具为操作系统自带的 &lt;em&gt;curl&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="login"&gt;
&lt;h3&gt;Login&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Request&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl&lt;span class="w"&gt; &lt;/span&gt;-k&lt;span class="w"&gt; &lt;/span&gt;https://192.168.38.10:8000/login&lt;span class="w"&gt; &lt;/span&gt;-H&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Accept: application/x-yaml&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pengyao&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pengyao_pass&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;eauth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pam&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Response&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;return&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;eauth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pam&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;expire&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;1385579710.806725&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;perms&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;.*&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;1385536510.8067241&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;784ee23c63794576a50ca5d3d890eb71efb0de6f&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pengyao&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中 &lt;em&gt;token&lt;/em&gt; 后边的串为认证成功后获取的token串，之后可以不用再次输入密码，直接使用本Token即可&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="minion-minion-01-example-com"&gt;
&lt;h3&gt;查询Minion(minion-01.example.com)的信息&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Request&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl&lt;span class="w"&gt; &lt;/span&gt;-k&lt;span class="w"&gt; &lt;/span&gt;https://192.168.38.10:8000/minions/minion-01.example.com&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;-H&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Accept: application/x-yaml&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;-H&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;X-Auth-Token: 8e211da5d6bbb51fbffe6468a3ca0c6a24b3e535&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中 &lt;em&gt;X-Auth-Token&lt;/em&gt; 后边的串为之前Login获取到的Token串, 如果请求的URL不包含 &lt;em&gt;minion-01.example.com&lt;/em&gt; ，则请求的为所有Minion的信息&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Response&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;return&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;minion-01.example.com&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;cpu_flags&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;fpu&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;vme&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;de&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;......&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="job"&gt;
&lt;h3&gt;job管理&lt;/h3&gt;
&lt;div class="section" id="jobs"&gt;
&lt;h4&gt;获取缓存的jobs列表&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Request&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl&lt;span class="w"&gt; &lt;/span&gt;-k&lt;span class="w"&gt; &lt;/span&gt;https://192.168.38.10:8000/jobs/&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;-H&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Accept: application/x-yaml&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;-H&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;X-Auth-Token: 8e211da5d6bbb51fbffe6468a3ca0c6a24b3e535&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Response&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;return&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;20131127065003726179&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;Arguments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;test.ping&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;Start Time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;2013, Nov 27 06:50:03.726179&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;Target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;Target-type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;glob&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;User&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;sudo_vagrant&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="job-1"&gt;
&lt;h4&gt;查询指定的job&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Request&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl&lt;span class="w"&gt; &lt;/span&gt;-k&lt;span class="w"&gt; &lt;/span&gt;https://192.168.38.10:8000/jobs/20131127065003726179&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;-H&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Accept: application/x-yaml&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;-H&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;X-Auth-Token: 8e211da5d6bbb51fbffe6468a3ca0c6a24b3e535&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Response&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;return&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;minion-01.example.com&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="section-4"&gt;
&lt;h3&gt;远程执行模块&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Request&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl&lt;span class="w"&gt; &lt;/span&gt;-k&lt;span class="w"&gt; &lt;/span&gt;https://192.168.38.10:8000/&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;-H&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Accept: application/x-yaml&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;-H&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;X-Auth-Token: 8e211da5d6bbb51fbffe6468a3ca0c6a24b3e535&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;client&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;local&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;tgt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;fun&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test.ping&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;也可以请求 &lt;em&gt;https://192.168.38.10:8000/run&lt;/em&gt; ，不过该方法为一次性使用，无法使用Token, 只能使用username和password&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Response:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;return&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;minion-01.example.com&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="runner"&gt;
&lt;h3&gt;运行runner&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Request&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl&lt;span class="w"&gt; &lt;/span&gt;-k&lt;span class="w"&gt; &lt;/span&gt;https://192.168.38.10:8000/&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;-H&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Accept: application/x-yaml&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;-H&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;X-Auth-Token: 8e211da5d6bbb51fbffe6468a3ca0c6a24b3e535&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;client&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;runner&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;fun&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;manage.status&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Response&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;return&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;down&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;up&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;minion-01.example.com&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="wheel"&gt;
&lt;h3&gt;运行wheel&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;注意: 由于当前版本的Salt Master有一处bug, 导致wheel的结果无法返回(&lt;a class="reference external" href="https://groups.google.com/forum/#!topic/salt-users/9HcZ6R7MB0g"&gt;https://groups.google.com/forum/#!topic/salt-users/9HcZ6R7MB0g&lt;/a&gt;)，官方在最新的代码中已经修复,使用时需要使用github中最新的salt代码&lt;/li&gt;
&lt;li&gt;Request(例子为查询所有的minion key列表)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl&lt;span class="w"&gt; &lt;/span&gt;-k&lt;span class="w"&gt; &lt;/span&gt;https://localhost:8000/&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;-H&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Accept: application/x-yaml&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;-H&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;X-Auth-Token: 8e211da5d6bbb51fbffe6468a3ca0c6a24b3e535&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;client&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;wheel&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;fun&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;key.list_all&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Response&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;return&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;_stamp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;2013-12-23_04:54:22.483159&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;wheel.key.list_all&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;jid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;20131223045422481844&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;return&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;local&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;master.pem&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;master.pub&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;minions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;minion-01.example.com&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;minions_pre&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[]&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;minions_rejected&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="w w-Error"&gt; &lt;/span&gt;&lt;span class="nt"&gt;success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nt"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;salt/wheel/20131223045422481844&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nt"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pengyao&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="w w-Error"&gt; &lt;/span&gt;&lt;span class="nt"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;salt/wheel/20131223045422481844&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="targeting"&gt;
&lt;h3&gt;Targeting&lt;/h3&gt;
&lt;p&gt;谢谢 &lt;em&gt;苦咖啡&lt;/em&gt; 提供&lt;/p&gt;
&lt;p&gt;如果想在api中使用salt的 &lt;a class="reference external" href="http://docs.saltstack.com/topics/targeting/"&gt;Targeting&lt;/a&gt; 功能，可以在Request的Post Data中增加 &lt;em&gt;expr_form&lt;/em&gt; (默认是 &lt;em&gt;glob&lt;/em&gt; )及值即可:&lt;/p&gt;
&lt;p&gt;依然以curl为例:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl&lt;span class="w"&gt; &lt;/span&gt;-k&lt;span class="w"&gt; &lt;/span&gt;https://192.168.38.10:8000/&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;-H&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Accept: application/x-yaml&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;-H&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;X-Auth-Token: 8e211da5d6bbb51fbffe6468a3ca0c6a24b3e535&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;client&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;local&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;tgt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;webcluster&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;expr_form&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nodegroup&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;fun&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test.ping&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将利用 &lt;a class="reference external" href="http://docs.saltstack.com/topics/targeting/nodegroups.html"&gt;nodegroup&lt;/a&gt; 匹配到名为 &lt;em&gt;webcluster&lt;/em&gt; 的target。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="section-5"&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;Salt API几乎涵盖了所有的salt操作，功能强劲，尤其是需要salt和第三方系统集成的场景，值得拥有。&lt;/p&gt;
&lt;/div&gt;
</content><category term="SaltStack"></category><category term="saltstack"></category><category term="API"></category><category term="REST"></category><category term="salt-api"></category><category term="部署"></category><category term="安装配置"></category><category term="使用"></category></entry><entry><title>基于SaltStack完成LVS的配置管理</title><link href="https://pengyao.org/howto_configure_linux_virtual_server_using_saltstack.html" rel="alternate"></link><published>2013-11-24T00:00:00+08:00</published><updated>2013-11-24T00:00:00+08:00</updated><author><name>pengyao</name></author><id>tag:pengyao.org,2013-11-24:/howto_configure_linux_virtual_server_using_saltstack.html</id><summary type="html">&lt;p class="first last"&gt;SaltStack最新代码中已经包含了对LVS(Linux Virutal Server)的支持, 本文将简要描述如何基于SaltStack完成LVS Loadblance(DR)及RealServer的配置管理&lt;/p&gt;
</summary><content type="html">&lt;p&gt;之前由于工作需求，编写了SaltStack的 &lt;a class="reference external" href="https://github.com/pengyao/salt/blob/develop/salt/modules/lvs.py"&gt;LVS远程执行模块&lt;/a&gt;  , &lt;a class="reference external" href="https://github.com/pengyao/salt/blob/develop/salt/states/lvs_service.py"&gt;LVS service状态管理模块&lt;/a&gt; 及 &lt;a class="reference external" href="https://github.com/pengyao/salt/blob/develop/salt/states/lvs_server.py"&gt;LVS server状态管理模块&lt;/a&gt; ,并 &lt;a class="reference external" href="https://github.com/saltstack/salt/pull/8741"&gt;提交给了SaltStack官方&lt;/a&gt;,现已合并至官方代码中，本文将描述如何基于SaltStack完成LVS Loadblance(DR)及RealServer的配置管理.&lt;/p&gt;
&lt;div class="section" id="section-1"&gt;
&lt;h2&gt;前置阅读&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://blog.csdn.net/justlinux2010/article/details/8539205"&gt;LVS-DR模式配置详解&lt;/a&gt; ,需要注意的是，LVS-DR方式工作在数据链路层，文中描述需要开启ip_forward,其实没有必要, 详情见 &lt;a class="reference external" href="http://zh.linuxvirtualserver.org/node/2585"&gt;LVS DR模式原理剖析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="section-2"&gt;
&lt;h2&gt;环境说明&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;三台服务器用于LVS集群，其中主机名为lvs的担当的角色为loadblance，对应的IP地址为192.168.36.10；主机名为web-01和web-02的主机担当的角色为RealServer, 对应的IP地址分别为192.168.36.11及192.168.36.12&lt;/li&gt;
&lt;li&gt;LVS VIP: 192.168.36.33, Port: 80, VIP绑定在lvs的eth1口&lt;/li&gt;
&lt;li&gt;最最重要的是loadblance主机为Linux，并已安装ipvsadm, Windows/Unix等主机的同学请绕过吧，这不是我的错......&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="section-3"&gt;
&lt;h2&gt;开工&lt;/h2&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;以下所有操作均在Master上进行&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="saltstack-lvs"&gt;
&lt;h3&gt;配置SaltStack LVS模块&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;如果使用的Salt版本已经包含了lvs模块，请忽略本节内容，测试方法:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;salt&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lvs&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;cmd.run&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python -c &amp;#39;import salt.modules.lvs&amp;#39;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果输出有 &lt;em&gt;ImportError&lt;/em&gt; 字样，则表示模块没有安装，需要进行如下操作:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;/srv/salt/_modules&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;mkdir&lt;span class="w"&gt; &lt;/span&gt;/srv/salt/_modules
&lt;span class="nb"&gt;test&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;/srv/salt/_states&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;mkdir&lt;span class="w"&gt; &lt;/span&gt;/srv/salt/_states
wget&lt;span class="w"&gt; &lt;/span&gt;https://raw.github.com/saltstack/salt/develop/salt/modules/lvs.py&lt;span class="w"&gt; &lt;/span&gt;-O&lt;span class="w"&gt; &lt;/span&gt;/srv/salt/_modules/lvs.py
wget&lt;span class="w"&gt; &lt;/span&gt;https://raw.github.com/saltstack/salt/develop/salt/states/lvs_service.py&lt;span class="w"&gt; &lt;/span&gt;-O&lt;span class="w"&gt; &lt;/span&gt;/srv/salt/_states/lvs_service.py
wget&lt;span class="w"&gt; &lt;/span&gt;https://raw.github.com/saltstack/salt/develop/salt/states/lvs_server.py&lt;span class="w"&gt; &lt;/span&gt;-O&lt;span class="w"&gt; &lt;/span&gt;/srv/salt/_states/lvs_server.py
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="pillar"&gt;
&lt;h3&gt;配置pillar&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;/srv/pillar/lvs/loadblance.sls&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;lvs-loadblance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;lvstest&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;vip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;192.168.36.33&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;vip-nic&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;eth1&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;80&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;protocol&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;tcp&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;scheduler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;wlc&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;realservers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;web-01&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;192.168.36.11&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;80&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;packet_forward_method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;dr&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;10&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;web-02&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;192.168.36.12&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;80&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;packet_forward_method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;dr&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;30&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;/srv/pillar/lvs/realserver.sls&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;lvs-realserver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;lvstest&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;vip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;192.168.36.33&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;/srv/pillar/top.sls&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;base&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;lvs&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;lvs.loadblance&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;web-0*&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;lvs.realserver&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="states"&gt;
&lt;h3&gt;编写States&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;/srv/salt/lvs/loadblance.sls&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;# config lvs&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;lvs-loadblance&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;pillar&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;each_lvs&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;pillar&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lvs-loadblance&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="x"&gt;# config lvs vip&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;each_lvs&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;-vip:&lt;/span&gt;
&lt;span class="x"&gt;  network.managed:&lt;/span&gt;
&lt;span class="x"&gt;    - name: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;each_lvs&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;vip-nic&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;:&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;each_lvs&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;
&lt;span class="x"&gt;    - enable: True&lt;/span&gt;
&lt;span class="x"&gt;    - type: eth&lt;/span&gt;
&lt;span class="x"&gt;    - proto: none&lt;/span&gt;
&lt;span class="x"&gt;    - ipaddr: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;each_lvs&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;vip&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;
&lt;span class="x"&gt;    - netmask: 255.255.255.255&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;service_address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;each_lvs&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;vip&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;:&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;each_lvs&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;port&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]|&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;each_lvs&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;-service:&lt;/span&gt;
&lt;span class="x"&gt;  lvs_service.present:&lt;/span&gt;
&lt;span class="x"&gt;    - protocol: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;each_lvs&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;protocol&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;
&lt;span class="x"&gt;    - service_address: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;service_address&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;
&lt;span class="x"&gt;    - scheduler: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;each_lvs&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;scheduler&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;each_rs&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;each_lvs&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;realservers&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;server_address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;each_rs&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ip&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;:&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;each_rs&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;port&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]|&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;each_rs&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;-server:&lt;/span&gt;
&lt;span class="x"&gt;  lvs_server.present:&lt;/span&gt;
&lt;span class="x"&gt;    - protocol: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;each_lvs&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;protocol&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;
&lt;span class="x"&gt;    - service_address: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;service_address&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;
&lt;span class="x"&gt;    - server_address: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;server_address&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;
&lt;span class="x"&gt;    - packet_forward_method: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;each_rs&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;packet_forward_method&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;
&lt;span class="x"&gt;    - weight: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;each_rs&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;weight&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;/srv/salt/lvs/realserver.sls&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;# ignore arp&lt;/span&gt;
&lt;span class="x"&gt;net.ipv4.conf.all.arp_ignore:&lt;/span&gt;
&lt;span class="x"&gt;  sysctl.present:&lt;/span&gt;
&lt;span class="x"&gt;    - value: 1&lt;/span&gt;

&lt;span class="x"&gt;net.ipv4.conf.lo.arp_ignore:&lt;/span&gt;
&lt;span class="x"&gt;  sysctl.present:&lt;/span&gt;
&lt;span class="x"&gt;    - value: 1&lt;/span&gt;

&lt;span class="x"&gt;net.ipv4.conf.all.arp_announce:&lt;/span&gt;
&lt;span class="x"&gt;  sysctl.present:&lt;/span&gt;
&lt;span class="x"&gt;    - value: 2&lt;/span&gt;

&lt;span class="x"&gt;net.ipv4.conf.lo.arp_announce:&lt;/span&gt;
&lt;span class="x"&gt;  sysctl.present:&lt;/span&gt;
&lt;span class="x"&gt;    - value: 2&lt;/span&gt;


&lt;span class="x"&gt;# config lvs vip&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;lvs-realserver&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;pillar&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;each_lvs&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;pillar&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lvs-realserver&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="x"&gt;lvs-vip:&lt;/span&gt;
&lt;span class="x"&gt;  network.managed:&lt;/span&gt;
&lt;span class="x"&gt;    - name: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;lo&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;:&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;each_lvs&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;
&lt;span class="x"&gt;    - enable: True&lt;/span&gt;
&lt;span class="x"&gt;    - type: eth&lt;/span&gt;
&lt;span class="x"&gt;    - proto: none&lt;/span&gt;
&lt;span class="x"&gt;    - ipaddr: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;each_lvs&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;vip&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;
&lt;span class="x"&gt;    - netmask: 255.255.255.255&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;/srv/salt/top.sls*&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;base&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;lvs&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;lvs.loadblance&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;web-0*&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;lvs.realserver&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="section-4"&gt;
&lt;h3&gt;应用配置&lt;/h3&gt;
&lt;p&gt;如果之前进行 &lt;em&gt;配置LVS模块&lt;/em&gt; 的操作，需要进行同步模块的操作:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;salt&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lvs*&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;saltutil.sync_all
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;应用LVS配置:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;salt&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;state.highstate
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;查看LVS当前状态:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;salt&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lvs&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;lvs.list
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="section-5"&gt;
&lt;h3&gt;总结&lt;/h3&gt;
&lt;p&gt;通过SaltStack LVS模块，可以快速的查询LVS状态，执行LVS常用指令及完成LVS的配置管理。如有需要调整RealServer规则或添加新的RealServer, 只需要修改 &lt;em&gt;/srv/pillar/lvs/loadblance.sls&lt;/em&gt; ，然后应用配置即可.&lt;/p&gt;
&lt;p&gt;本文中所用到的代码已经上传至github，传送门: &lt;a class="reference external" href="https://github.com/pengyao/salt-lvs"&gt;https://github.com/pengyao/salt-lvs&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="SaltStack"></category><category term="saltstack"></category><category term="howto"></category><category term="LVS"></category><category term="Linux Vritual Server"></category><category term="配置管理"></category></entry><entry><title>基于Salt Master/Minions快速构建Salt SSH环境</title><link href="https://pengyao.org/howto_setup_salt_ssh_from_minion.html" rel="alternate"></link><published>2013-11-08T00:00:00+08:00</published><updated>2013-11-08T00:00:00+08:00</updated><author><name>pengyao</name></author><id>tag:pengyao.org,2013-11-08:/howto_setup_salt_ssh_from_minion.html</id><summary type="html">&lt;p class="first last"&gt;Salt 0.17版本重要的特性是引入了Salt SSH系统，本文基于已有的SaltStack Master/Minions环境,快速构建Salt SSH维护环境, 提供Salt多重维护方式.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Salt 0.17版本已发布，该版本中重要的特性是引入了Salt SSH系统，提供了无需Minion、基于SSH的维护方式。原有的Salt维护环境已经初具规模，再手动重新构建Salt SSH环境成本较高。偷懒是人的天性，利用原有SaltStack Master/Minions环境，如何快速构建新的Salt SSH维护环境将是本文的主题.&lt;/p&gt;
&lt;div class="section" id="section-1"&gt;
&lt;h2&gt;前置阅读&lt;/h2&gt;
&lt;p&gt;预则立，不预则废。阅读本文前先阅读如下文章:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Salt 0.17 Release Note: &lt;a class="reference external" href="http://docs.saltstack.com/topics/releases/0.17.0.html"&gt;http://docs.saltstack.com/topics/releases/0.17.0.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Salt SSH: &lt;a class="reference external" href="http://docs.saltstack.com/topics/ssh/"&gt;http://docs.saltstack.com/topics/ssh/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Salt Rosters: &lt;a class="reference external" href="http://docs.saltstack.com/topics/ssh/roster.html"&gt;http://docs.saltstack.com/topics/ssh/roster.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="section-2"&gt;
&lt;h2&gt;环境说明&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Minion版本: 本文会采用 &lt;a class="reference external" href="http://docs.saltstack.com/topics/mine/"&gt;Salt Mine&lt;/a&gt; 获取已有的Minion ID及IP地址，由于Salt Mine为0.15.0引入的新功能，所以需要保证Minion的版本等于或高于0.15.0&lt;/li&gt;
&lt;li&gt;Master的安装采用EPEL仓库yum方式&lt;/li&gt;
&lt;li&gt;所有minion端sshd服务已启动，并允许Master访问&lt;/li&gt;
&lt;li&gt;Master所在服务器上同时安装有Minion并运行Master进行管理, 对应的Minion ID为 &lt;em&gt;salt&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Salt file_roots目录为 &lt;em&gt;/srv/salt/&lt;/em&gt; , pillar_roots目录为 &lt;em&gt;/srv/pillar/&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="section-3"&gt;
&lt;h2&gt;开工&lt;/h2&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;以下所有操作在Master端进行&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="salt-sshkey"&gt;
&lt;h3&gt;创建用于Salt SSH环境的用户及key认证管理环境&lt;/h3&gt;
&lt;p&gt;生成Master SSH key&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;## 创建master ssh key目录&lt;/span&gt;
mkdir&lt;span class="w"&gt; &lt;/span&gt;/etc/salt/pki/master/ssh/
&lt;span class="c1"&gt;## 生成Master SSH key&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/etc/salt/pki/master/ssh/
ssh-keygen&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;rsa&lt;span class="w"&gt; &lt;/span&gt;-P&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;salt-ssh.rsa
&lt;span class="c1"&gt;## 复制master public key至 salt fileserver&lt;/span&gt;
cp&lt;span class="w"&gt; &lt;/span&gt;/etc/salt/pki/master/ssh/salt-ssh.rsa.pub&lt;span class="w"&gt; &lt;/span&gt;/srv/salt/salt/files/salt-ssh.rsa.pub
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;编写用于Salt SSH管理的用户及key认证状态管理文件, &lt;em&gt;/srv/salt/salt/ssh/init.sls&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;salt-user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;{&lt;/span&gt;&lt;span class="c1"&gt;# salt user #}&lt;/span&gt;
&lt;span class="nt"&gt;  user.present&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="nt"&gt;    - name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;salt&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;{&lt;/span&gt;&lt;span class="c1"&gt;# salt user sudoer #}&lt;/span&gt;
&lt;span class="nt"&gt;  file.managed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="nt"&gt;    - name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;/etc/sudoers.d/salt&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;- source&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;salt&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;//salt/files/etc/sudoers.d/salt&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;- require&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
&lt;span class="nt"&gt;      - user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;salt-user&lt;/span&gt;

&lt;span class="nv"&gt;salt-master-key&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
&lt;span class="nt"&gt;  ssh_auth.present&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="nt"&gt;    - user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;salt&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;- source&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;salt&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;//salt/files/salt-ssh.rsa.pub&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;- require&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
&lt;span class="nt"&gt;      - user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;salt-user&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;salt&lt;/em&gt; 用户对应的sudoer文件 &lt;em&gt;/srv/salt/salt/files/etc/sudoers.d/salt&lt;/em&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Defaults:salt !requiretty
salt ALL=(ALL) NOPASSWD: ALL
&lt;/pre&gt;
&lt;p&gt;应用状态&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;salt&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;state.sls&lt;span class="w"&gt; &lt;/span&gt;salt.ssh
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="mine-minion-idip"&gt;
&lt;h3&gt;配置Mine,以获取Minion id及IP地址&lt;/h3&gt;
&lt;p&gt;配置Salt Mine, &lt;em&gt;/srv/pillar/salt/mine.sls&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;mine_functions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;network.ip_addrs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;eth0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配置pillar top.sls, &lt;em&gt;/srv/pillar/top.sls&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;base&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;salt.mine&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;刷新Pillar，并验证Salt Mine配置&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;salt&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;saltutil.refresh_pillar
salt&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;pillar.get&lt;span class="w"&gt; &lt;/span&gt;mine_functions
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;更新Salt Mine，并测试获取所有Minions的ID及IP&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;salt&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;mine.update
salt&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;salt&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;mine.get&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;network.ip_addrs
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="salt-rosters"&gt;
&lt;h3&gt;生成Salt Rosters&lt;/h3&gt;
&lt;p&gt;配置Salt Rosters state&lt;/p&gt;
&lt;p&gt;&lt;em&gt;/srv/salt/salt/ssh/roster.sls&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;salt-rosters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;{&lt;/span&gt;&lt;span class="c1"&gt;# salt rosters file for salt-ssh #}&lt;/span&gt;
&lt;span class="nt"&gt;  file.managed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="nt"&gt;    - name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;/etc/salt/roster&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;- source&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;salt&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;&lt;span class="nv"&gt;//salt/files/etc/salt/roster&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;- template&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;jinja&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;/srv/salt/salt/files/etc/salt/roster&lt;/em&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{% for eachminion, each_mine in salt['mine.get']('*', 'network.ip_addrs').iteritems() -%}
{{eachminion}}:
  host: {{each_mine[0]}}
  user: salt
  sudo: True
{% endfor -%}
&lt;/pre&gt;
&lt;p&gt;生成Salt Rosters&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;salt&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;salt&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;state.sls&lt;span class="w"&gt; &lt;/span&gt;salt.ssh.roster
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="salt-ssh"&gt;
&lt;h3&gt;应用Salt SSH&lt;/h3&gt;
&lt;p&gt;将Master升级至0.17及以上版本(EPEL Stable当前版本为已经为0.17.1-1), 至此, Salt SSH环境已经构建完毕&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum&lt;span class="w"&gt; &lt;/span&gt;update&lt;span class="w"&gt; &lt;/span&gt;salt-master
service&lt;span class="w"&gt; &lt;/span&gt;salt-master&lt;span class="w"&gt; &lt;/span&gt;restart
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试Salt SSH&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;## 运行Salt Module&lt;/span&gt;
salt-ssh&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;test.ping
&lt;span class="c1"&gt;## 运行原始SHELL命令&lt;/span&gt;
salt-ssh&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;uptime&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="section-4"&gt;
&lt;h2&gt;后话&lt;/h2&gt;
&lt;p&gt;Salt这是要抢 &lt;a class="reference external" href="https://github.com/fabric/fabric"&gt;Fabric&lt;/a&gt; 饭碗的节奏啊，个人更喜欢Salt Master/Minions这样的管理方式，Salt SSH作为补充，用于升级Minion、重启Minion等等自维护工作还是很靠谱的。有了Salt SSH，再也不用担心是先有鸡还是先有蛋的问题了.&lt;/p&gt;
&lt;/div&gt;
</content><category term="SaltStack"></category><category term="saltstack"></category><category term="salt-ssh"></category><category term="master/minion"></category><category term="howto"></category><category term="Salt SSH"></category></entry><entry><title>【翻译】如何建立多Master的SaltStack环境</title><link href="https://pengyao.org/howto_configure_a_multi_master_saltstack_setup.html" rel="alternate"></link><published>2013-09-25T00:00:00+08:00</published><updated>2013-09-25T00:00:00+08:00</updated><author><name>pengyao</name></author><id>tag:pengyao.org,2013-09-25:/howto_configure_a_multi_master_saltstack_setup.html</id><summary type="html">&lt;p class="first last"&gt;翻译的《How To Configure A Multi-Master SaltStack Setup》&lt;/p&gt;
</summary><content type="html">&lt;ul class="simple"&gt;
&lt;li&gt;英文原文出处: &lt;a class="reference external" href="http://intothesaltmine.org/how_to_configure_a_multi_master_saltstack_setup.html"&gt;http://intothesaltmine.org/how_to_configure_a_multi_master_saltstack_setup.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;0.16.0版本的发布，带来了minion可以连接多Master的特性. 这种方式称为多master( &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;multi-master&lt;/span&gt;&lt;/tt&gt; )配置, 使环境中的SaltStack冗余。在这种配置下，Salt Minions将连接所有配置的Salt Master. 本文将带你了解如何建立多Master的环境.&lt;/p&gt;
&lt;div class="section" id="master-keys"&gt;
&lt;h2&gt;Master Keys&lt;/h2&gt;
&lt;p&gt;在建立多Master的配置中，主要的一点就是所有的Master使用同样的private key. 这些key将在Master第一次启动时自动生成。 因此在多Master环境建立时，需要从原始的(original) Master上拷贝其private key至第二个Master以提供它启动时自动生成的那个, 以此类推.&lt;/p&gt;
&lt;p&gt;Master的private key存储在Master本地的 &lt;tt class="docutils literal"&gt;pki_dir&lt;/tt&gt; 目录下. 默认的目录是 &lt;tt class="docutils literal"&gt;/etc/salt/pki/master/master.pem&lt;/tt&gt; . 将该key拷贝到新增的master上. 需要注意的是，在拷贝的时候，需要确保新增的master上并没有minion连接进来.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="configure-minions"&gt;
&lt;h2&gt;Configure Minions&lt;/h2&gt;
&lt;p&gt;当配置多Master时，Minion需要知道需要连接的每个Master的网络地址. 需要在Minion的配置文件中进行配置，默认的配置文件是 &lt;tt class="docutils literal"&gt;/etc/salt/minion&lt;/tt&gt; 。 找到 &lt;tt class="docutils literal"&gt;master&lt;/tt&gt; 配置项, 更新需要新增的Master.&lt;/p&gt;
&lt;p&gt;下边是一个多Master的配置例子:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;master&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;master1.example.tld&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;master2.example.tld&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配置完毕后，需要重启Minion以确保配置生效. 此时所有的Master均可以控制你的minions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sharing-files-between-masters"&gt;
&lt;h2&gt;Sharing Files Between Masters&lt;/h2&gt;
&lt;p&gt;Salt并不会自动在Master间共享文件. 本小节将带你了解Master间哪些文件需要同步以保持一致.&lt;/p&gt;
&lt;div class="section" id="minion-keys"&gt;
&lt;h3&gt;Minion Keys&lt;/h3&gt;
&lt;p&gt;Minion的keys需要每个Master都进行accept. 可以使用 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;salt-key&lt;/span&gt;&lt;/tt&gt; 手动接接受minion的key， 也可以在Master间保持key目录的同步. 需要同步的目录有:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;/etc/salt/pki/master/minions&lt;/li&gt;
&lt;li&gt;/etc/salt/pki/master/minions_pre&lt;/li&gt;
&lt;li&gt;/etc/salt/pki/master/minions_rejected&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;直接共享 &lt;tt class="docutils literal"&gt;/etc/salt/master&lt;/tt&gt; 目录是强烈反对的. 允许外部访问 master.pem key将带来严重的安全风险&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="file-roots"&gt;
&lt;h3&gt;file_roots&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;file_roots&lt;/tt&gt; 的内容需要在Master间同步以保持一致. 这里存放Salt State配置管理文件. 推荐同步内容使用 &lt;tt class="docutils literal"&gt;gitfs&lt;/tt&gt; backend，或者直接将 &lt;tt class="docutils literal"&gt;file_roots&lt;/tt&gt; 存储在共享存储上.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pillar-roots"&gt;
&lt;h3&gt;pillar_roots&lt;/h3&gt;
&lt;p&gt;同理，对于 &lt;tt class="docutils literal"&gt;pillar_roots&lt;/tt&gt; 也是如此，需要保持Pillar数据一致.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="master-configuration"&gt;
&lt;h3&gt;Master Configuration&lt;/h3&gt;
&lt;p&gt;最后你需要确保有关Master的配置选项在所有Master间是同步的. 除非你知道你不需要这么做,你需要保证以下的设置Master间是同步的:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;external_auth&lt;/li&gt;
&lt;li&gt;client_acl&lt;/li&gt;
&lt;li&gt;peer&lt;/li&gt;
&lt;li&gt;peer_run&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conslusion"&gt;
&lt;h2&gt;Conslusion&lt;/h2&gt;
&lt;p&gt;多Master环境配置提供了控制Minions的冗余性，配置相当简单. 只需要保证key及State文件在你的多Master间是同步的，你就可以透明的在多Master上控制你的Minions&lt;/p&gt;
&lt;/div&gt;
</content><category term="SaltStack"></category><category term="saltstack"></category><category term="multi-master"></category><category term="多master"></category><category term="howto"></category></entry><entry><title>Salt Runners manage学习</title><link href="https://pengyao.org/salt_runners_manage_01.html" rel="alternate"></link><published>2013-09-24T00:00:00+08:00</published><updated>2013-09-24T00:00:00+08:00</updated><author><name>pengyao</name></author><id>tag:pengyao.org,2013-09-24:/salt_runners_manage_01.html</id><summary type="html">&lt;p class="first last"&gt;参考手册和源码对Salt Runners manage进行学习&lt;/p&gt;
</summary><content type="html">&lt;ul class="simple"&gt;
&lt;li&gt;Salt Runners manage手册: &lt;a class="reference external" href="http://docs.saltstack.com/ref/runners/all/salt.runners.manage.html?highlight=manage#salt.runners.manage"&gt;http://docs.saltstack.com/ref/runners/all/salt.runners.manage.html?highlight=manage#salt.runners.manage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Salt Runners manage源码: &lt;a class="reference external" href="https://github.com/saltstack/salt/blob/develop/salt/runners/manage.py"&gt;https://github.com/saltstack/salt/blob/develop/salt/runners/manage.py&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下午灿哥在群里边分享了 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;salt-run&lt;/span&gt; manage.status&lt;/tt&gt; 的用法，用于检查minion当前是否存活(可连接). 这个功能果然不错，索性就打开对应的源码，对manage所有的方法进行一次学习&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;版本: 0.16.3&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="status"&gt;
&lt;h2&gt;status&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;使用方法: &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;salt-run&lt;/span&gt; manage.status&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;功能: 输出所有已知的minions的状态, 以up和down分组输出&lt;/li&gt;
&lt;li&gt;核心代码及补充的代码说明:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LocalClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__opts__&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;conf_file&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;minions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;test.ping&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;__opts__&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;timeout&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;   &lt;span class="c1"&gt;#利用client.cmd对所有的minion发送test.ping指令,用于探测minion是否存活&lt;/span&gt;

&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__opts__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;keys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list_keys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;                  &lt;span class="c1"&gt;# 利用salt.key获取当前master上有多少minion的key，即获取到完整的minion列表&lt;/span&gt;

&lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;up&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;minions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;         &lt;span class="c1"&gt;# 将执行test.ping有返回值的minion即存活的minion的ID放入up中&lt;/span&gt;
&lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;down&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;minions&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;minions&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;   &lt;span class="c1"&gt;#完整的minion列表减去存活的minion就是down掉/无法连接的minion喽&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;display_output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;__opts__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;# 输出&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;总结: 该方法果然很给力，从此妈妈再也不担心不知道minion是否存活喽&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="key-regen"&gt;
&lt;h2&gt;key_regen&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;使用方法: &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;salt-run&lt;/span&gt; manage.key_regen&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;功能: 重新生成环境下的所有key (副作用甚强，慎用，慎用, 除非你知道在做什么)&lt;/li&gt;
&lt;li&gt;核心代码及补充的代码说明:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;minions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;saltutil.regen_keys&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;# 执行saltutil.regen_keys，重新生成key&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;总结： 慎用，慎用，慎用&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="down"&gt;
&lt;h2&gt;down&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;使用方法: &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;salt-run&lt;/span&gt; manage.down&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;功能: 输出down掉/无法连接的minion&lt;/li&gt;
&lt;li&gt;核心代码及补充的代码说明:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;down&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;   &lt;span class="c1"&gt;# 直接用之前的status方法，然后获取down的minion列表&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;总结: 函数编程果然是王道，省时省力，直接通过该方法查询down掉的minion，再也不麻烦了&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="up"&gt;
&lt;h2&gt;up&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;使用方法: &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;salt-run&lt;/span&gt; manage.up&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;功能: 输出存活的minion&lt;/li&gt;
&lt;li&gt;核心代码及补充的代码说明:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;up&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;   &lt;span class="c1"&gt;# 和上边直接down一样，不过这次的需求变成了up而已&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;总结: 和楼上类似&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="versions"&gt;
&lt;h2&gt;versions&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;使用方法: &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;salt-run&lt;/span&gt; manage.versions&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;功能: 输出所有存活的minion的版本和master的版本对比情况&lt;/li&gt;
&lt;li&gt;核心代码及补充的代码说明:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;minions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;test.version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;__opts__&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;timeout&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;  &lt;span class="c1"&gt;# 通过client.cmd方法下发所有minion需要执行test.version(输出版本号)的指令&lt;/span&gt;

&lt;span class="n"&gt;labels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;                        &lt;span class="c1"&gt;# 定义版本对比的描述&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Minion requires update&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Up to date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Minion newer than master&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;version_status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="n"&gt;comps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__version__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;# 获取master version&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;comps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;master_version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;comps&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;master_version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__version__&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;minion&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;minions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;comps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;minions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;minion&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;comps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;minion_version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;comps&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;minion_version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;minions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;minion&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;ver_diff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;minion_version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;master_version&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# 通过python的cmp方法对版本号进行对比&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ver_diff&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;version_status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;version_status&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ver_diff&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;version_status&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ver_diff&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;minion&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;version_status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;minion&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;version_status&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
        &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;minion&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;salt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;display_output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;__opts__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;总结: 利用本方法，哪些minion需要升级立马得知，谁用谁知道啊!&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="SaltStack"></category><category term="saltstack"></category><category term="runners"></category><category term="manage"></category><category term="status"></category></entry><entry><title>【翻译】在SaltStack中如何使用require及watch语法</title><link href="https://pengyao.org/howto_to_use_require_and_watch_statements.html" rel="alternate"></link><published>2013-09-18T00:00:00+08:00</published><updated>2013-09-18T00:00:00+08:00</updated><author><name>pengyao</name></author><id>tag:pengyao.org,2013-09-18:/howto_to_use_require_and_watch_statements.html</id><summary type="html">&lt;p class="first last"&gt;翻译了intothesaltmine的《HOW TO USE REQUIRE AND WATCH STATEMENTS》，本文主要讲述在SaltStack中，如何使用require及watch语法来确定state间的依赖关系及执行顺序.&lt;/p&gt;
</summary><content type="html">&lt;ul class="simple"&gt;
&lt;li&gt;原文出处: &lt;a class="reference external" href="http://intothesaltmine.org/how_to_use_require_and_watch_statements.html"&gt;http://intothesaltmine.org/how_to_use_require_and_watch_statements.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;译者: &lt;a class="reference external" href="http://pengyao.org/"&gt;pengyao&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在SaltStack配置关系系统中支持许多强大的选项。无论是简单的如软件包的安装还是使用模板和条件语句. SaltStack States可以从小巧逐步变得很复杂。幸运的是SaltStack提供一种用于解决States间依赖关系的方法. 本小节将讲述如何使用 &lt;tt class="docutils literal"&gt;require&lt;/tt&gt;、&lt;tt class="docutils literal"&gt;require_in&lt;/tt&gt;、&lt;tt class="docutils literal"&gt;watch&lt;/tt&gt;、&lt;tt class="docutils literal"&gt;watch_in&lt;/tt&gt;&lt;/p&gt;
&lt;div class="section" id="requisites"&gt;
&lt;h2&gt;Requisites&lt;/h2&gt;
&lt;p&gt;在SaltStack的世界中，requisites(译者注: 该词没找到合适的中文翻译，暂时使用英文原词)有两种类型，直接的requisites和&amp;quot;requisite_ins&amp;quot;。这些requisites是方向性的(directional)，用于指定说&amp;quot;我依赖于某些东西&amp;quot;或&amp;quot;一些东西依赖于我&amp;quot;&lt;/p&gt;
&lt;div class="section" id="require"&gt;
&lt;h3&gt;require&lt;/h3&gt;
&lt;p&gt;下边是使用 &lt;tt class="docutils literal"&gt;require&lt;/tt&gt; 语法的例子:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pkg.installed&lt;/span&gt;

&lt;span class="nt"&gt;/etc/vimrc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;file.managed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;salt://edit/vimrc&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;require&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;pkg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;vim&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在这个例子中， &lt;tt class="docutils literal"&gt;/etc/vimrc&lt;/tt&gt; 文件并不会被placed(managed)，直到 &lt;tt class="docutils literal"&gt;vim&lt;/tt&gt; 软件包已安装&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="require-in"&gt;
&lt;h3&gt;require_in&lt;/h3&gt;
&lt;p&gt;下边是同样的例子，只是这次使用了 &lt;tt class="docutils literal"&gt;require_in&lt;/tt&gt; :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;pkg.installed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;require_in&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;/etc/vimrc&lt;/span&gt;

&lt;span class="nt"&gt;/etc/vimrc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;file.managed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;salt://edit/vimrc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个例子的效果是相同的，在 &lt;tt class="docutils literal"&gt;vim&lt;/tt&gt; 中指定了 &lt;tt class="docutils literal"&gt;/etc/vimrc&lt;/tt&gt; 依赖于我&lt;/p&gt;
&lt;p&gt;在最后，将会创建一个从属(dependency)map，并以有限的(finite)及可预见的(predictable)顺序执行.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="watch"&gt;
&lt;h3&gt;watch&lt;/h3&gt;
&lt;p&gt;下面将以 &lt;tt class="docutils literal"&gt;watch&lt;/tt&gt; 语法举例，在本例中，运行中的 &lt;tt class="docutils literal"&gt;ntpd&lt;/tt&gt; 服务将会关注 &lt;tt class="docutils literal"&gt;/etc/ntp.conf&lt;/tt&gt; 文件的变化，如果发生变化，将会触发重启服务的操作.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;ntpd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;service.running&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;watch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;/etc/nto.conf&lt;/span&gt;

&lt;span class="nt"&gt;/etc/ntp.conf&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;file.managed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;salt://ntp/files/ntp.conf&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="watch-in"&gt;
&lt;h3&gt;watch_in&lt;/h3&gt;
&lt;p&gt;在接下来例子中， &lt;tt class="docutils literal"&gt;/etc/ntp.conf&lt;/tt&gt; 声明(declaring)它应该被 &lt;tt class="docutils literal"&gt;ntpd&lt;/tt&gt; 服务watch&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;ntpd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;service.running&lt;/span&gt;

&lt;span class="nt"&gt;/etc/ntp.conf&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;file.managed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;salt://ntp/files/ntp.conf&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;watch_in&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;service&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ntpd&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;总结(Conclusion)&lt;/h2&gt;
&lt;p&gt;在State规则中，你可以通过强大的 &lt;tt class="docutils literal"&gt;require&lt;/tt&gt; 、 &lt;tt class="docutils literal"&gt;require_in&lt;/tt&gt; 、 &lt;tt class="docutils literal"&gt;watch&lt;/tt&gt; 及 &lt;tt class="docutils literal"&gt;watch_in&lt;/tt&gt; 指定state间的依赖关系. 无论是一个服务应该watch一个文件的变化，还是一个服务运行前必须确保软件包已安装都可以通过它们来指定state的逻辑执行顺序.&lt;/p&gt;
&lt;/div&gt;
</content><category term="SaltStack"></category><category term="saltstack"></category><category term="require"></category><category term="watch"></category><category term="order"></category></entry><entry><title>常见WebServer日志格式中请求处理时间汇总</title><link href="https://pengyao.org/webserver-request-time-1.html" rel="alternate"></link><published>2013-05-15T00:00:00+08:00</published><updated>2013-05-15T00:00:00+08:00</updated><author><name>pengyao</name></author><id>tag:pengyao.org,2013-05-15:/webserver-request-time-1.html</id><summary type="html">&lt;p class="first last"&gt;不同WebServer的日志格式中对于请求处理时间使用的关键字及单位是不相同的，对常用的WebServer进行汇总.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;如题，直接上表格:&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="25%" /&gt;
&lt;col width="33%" /&gt;
&lt;col width="42%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;WebServer&lt;/th&gt;
&lt;th class="head"&gt;日志格式中对应的关键字&lt;/th&gt;
&lt;th class="head"&gt;单位&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://nginx.org"&gt;Nginx&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;$request_time&lt;/td&gt;
&lt;td&gt;秒,小数点后可以精确到毫秒&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://httpd.apache.org"&gt;Apache&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;%D 或 %T&lt;/td&gt;
&lt;td&gt;%D为微秒, %T为秒&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://tomcat.apache.org"&gt;Tomcat&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;%D 或 %T&lt;/td&gt;
&lt;td&gt;%D为毫秒, %T为秒&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://www.caucho.com/resin"&gt;Resin&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;%D 或 %T&lt;/td&gt;
&lt;td&gt;%D为微秒, %T为秒&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://www.iis.net"&gt;IIS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;time-taken&lt;/td&gt;
&lt;td&gt;微秒&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content><category term="WebServer"></category><category term="request time"></category><category term="请求处理时间"></category><category term="webserver"></category><category term="nginx"></category><category term="apache"></category><category term="tomcat"></category><category term="resin"></category><category term="IIS"></category></entry><entry><title>reStructuredText 入门</title><link href="https://pengyao.org/rest-primer-chinese.html" rel="alternate"></link><published>1989-06-04T00:00:00+08:00</published><updated>1989-06-04T00:00:00+08:00</updated><author><name>pengyao</name></author><id>tag:pengyao.org,1989-06-04:/rest-primer-chinese.html</id><summary type="html">&lt;p class="first last"&gt;转载的reStructuredText入门教程&lt;/p&gt;
</summary><content type="html">&lt;p&gt;原文出处: &lt;a class="reference external" href="http://sphinx-doc-zh.readthedocs.org/en/latest/rest.htm"&gt;http://sphinx-doc-zh.readthedocs.org/en/latest/rest.htm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本节简要介绍了 新结构化文本 ~ reStructuredText的 (reST)的概念和语法,
旨在提供足够的信息来帮助作者高效起草文件.
由于 reST 被设计成一个简单的,不显眼的标记语言,
所以,这不会花太长时间.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;权威 &lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;新结构化文本用户文档&lt;/a&gt;
在文章的 &amp;quot;ref&amp;quot; 链接中,有reST 各种结构的描述可供参考.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="paragraphs"&gt;
&lt;h2&gt;段落 Paragraphs&lt;/h2&gt;
&lt;p&gt;段落( :&lt;cite&gt;参考 &amp;lt;paragraphs&amp;gt;&lt;/cite&gt; )是 reST 文章中最常见的文本块.
段落是由一个或多个空白分隔的文本块.
同Python中的约定,在 reST 中使用缩进来标识,
因此, 所有同级段落,必须左对齐,使用同级缩进.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="inline-markup"&gt;
&lt;span id="inlinemarkup"&gt;&lt;/span&gt;&lt;h2&gt;行内标记 Inline markup&lt;/h2&gt;
&lt;p&gt;标准的reST 行内标记很简单:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;单星号: &lt;tt class="docutils literal"&gt;*文本*&lt;/tt&gt; 得 &lt;em&gt;强调&lt;/em&gt; (斜体 &lt;sup&gt;对中文一般效果不好&lt;/sup&gt;) ,&lt;/li&gt;
&lt;li&gt;双星号: &lt;tt class="docutils literal"&gt;**文本**&lt;/tt&gt; 得 &lt;strong&gt;加重&lt;/strong&gt; (加黑),&lt;/li&gt;
&lt;li&gt;反引号: &lt;tt class="docutils literal"&gt;``文本``&lt;/tt&gt; 得 代码引用.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If asterisks or backquotes appear in running text and could be confused with
inline markup delimiters, they have to be escaped with a backslash.&lt;/p&gt;
&lt;p&gt;如果有星号或反引号出现在引用的文本,
就可能会弄乱内联标记分隔符,这时,可以用反斜杠来转义.&lt;/p&gt;
&lt;p&gt;Be aware of some restrictions of this markup:
以下是知道这些标记的一些限制:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;不可叠用&lt;/li&gt;
&lt;li&gt;前后不能用空格: &lt;tt class="docutils literal"&gt;* text*&lt;/tt&gt; 这样会出错,&lt;/li&gt;
&lt;li&gt;必须和周围文字用非单词隔离, 一般使用转义空白来完成: &lt;tt class="docutils literal"&gt;thisis\ *one*\ word&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These restrictions may be lifted in future versions of the docutils.
docutils未来版本中,可能取消这些限制.&lt;/p&gt;
&lt;p&gt;reST also allows for custom &amp;quot;interpreted text roles&amp;quot;', which signify that the
enclosed text should be interpreted in a specific way.  Sphinx uses this to
provide semantic markup and cross-referencing of identifiers, as described in
the appropriate section.  The general syntax is &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;:rolename:`content`&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;reST 也支持自定&amp;quot;文本诠释规则&amp;quot;,
这意味着,任意由指定字符封闭的文本都可以用特定的方式来诠释.
Sphinx 就用这种形式来提供语义标记和交叉引用,
一般语法形如: &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;:规则名:`内容`&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Standard reST provides the following roles:
标准 reST 提供以下规则:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;cite&gt;emphasis&lt;/cite&gt; -- &lt;tt class="docutils literal"&gt;*emphasis*&lt;/tt&gt; 的替代拼写&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;strong&lt;/cite&gt; -- &lt;tt class="docutils literal"&gt;**strong**&lt;/tt&gt;  的替代拼写&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;literal&lt;/cite&gt; -- &lt;tt class="docutils literal"&gt;``literal``&lt;/tt&gt;  的替代拼写&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;subscript&lt;/cite&gt; -- 下标&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;superscript&lt;/cite&gt; -- 上标&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;title-reference&lt;/cite&gt; -- 书籍/期刊/及其他材料的标题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考: &lt;cite&gt;inline-markup&lt;/cite&gt; Sphinx 追加的规则&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="lists-and-quote-like-blocks"&gt;
&lt;h2&gt;列表和引用块 Lists and Quote-like blocks&lt;/h2&gt;
&lt;p&gt;List markup (:&lt;cite&gt;ref &amp;lt;bullet-lists&amp;gt;&lt;/cite&gt;) is natural: just place an asterisk at
the start of a paragraph and indent properly.  The same goes for numbered lists;
they can also be autonumbered using a &lt;tt class="docutils literal"&gt;#&lt;/tt&gt; sign::
列表标记(:&lt;cite&gt;参考 &amp;lt;bullet-lists&amp;gt;&lt;/cite&gt;): 只要自然的在段落的开始放置一个星号并正确缩进.
这同样适用于带编号的列表;
也可以使用``#``签署自动编号:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
* This is a bulleted list.
* It has two items, the second
  item uses two lines.

1. This is a numbered list.
2. It has two items too.

#. This is a numbered list.
#. It has two items too.
&lt;/pre&gt;
&lt;p&gt;Nested lists are possible, but be aware that they must be separated from the
parent list items by blank lines&lt;/p&gt;
&lt;p&gt;嵌套的列表是允许的但必须用空行同父列表分离开:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
* this is
* a list

  * with a nested list
  * and some subitems

* and here the parent list continues
&lt;/pre&gt;
&lt;p&gt;定义列表(:&lt;cite&gt;参考 &amp;lt;definition-lists&amp;gt;&lt;/cite&gt;) 如下创建:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
term (up to a line of text)
   Definition of the term, which must be indented

   and can even consist of multiple paragraphs

next term
   Description.
&lt;/pre&gt;
&lt;p&gt;Note that the term cannot have more than one line of text.
注意, 条目本身不能多行.&lt;/p&gt;
&lt;p&gt;Quoted paragraphs (:&lt;cite&gt;ref &amp;lt;block-quotes&amp;gt;&lt;/cite&gt;) are created by just indenting
them more than the surrounding paragraphs.
创建引用段落 (:&lt;cite&gt;参考 &amp;lt;block-quotes&amp;gt;&lt;/cite&gt;)只需要用缩进和其它段落区分即可.&lt;/p&gt;
&lt;p&gt;线块 (:&lt;cite&gt;ref &amp;lt;line-blocks&amp;gt;&lt;/cite&gt;) 是保留换行符的一种方法:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
| These lines are
| broken exactly like in
| the source file.
&lt;/pre&gt;
&lt;p&gt;还有其它特殊文本块形式是支持的:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;字段列表 (field lists :&lt;cite&gt;参考 &amp;lt;field-lists&amp;gt;&lt;/cite&gt;)&lt;/li&gt;
&lt;li&gt;选项列表 (option lists :&lt;cite&gt;参考 &amp;lt;option-lists&amp;gt;&lt;/cite&gt;)&lt;/li&gt;
&lt;li&gt;引述文本块 (quoted literal blocks :&lt;cite&gt;参考 &amp;lt;quoted-literal-blocks&amp;gt;&lt;/cite&gt;)&lt;/li&gt;
&lt;li&gt;文本测试块 (doctest blocks :&lt;cite&gt;参考 &amp;lt;doctest-blocks&amp;gt;&lt;/cite&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="source-code"&gt;
&lt;h2&gt;源代码 Source Code&lt;/h2&gt;
&lt;p&gt;代码文本块  (:&lt;cite&gt;参考 &amp;lt;literal-blocks&amp;gt;&lt;/cite&gt;) 由末尾是特殊标记 &lt;tt class="docutils literal"&gt;::&lt;/tt&gt; 的段落引发.
整个代码文本块必须缩进
(同所有的段落一样,使用空白行和周围文本完成分隔):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
This is a normal text paragraph. The next paragraph is a code sample::

   It is not processed in any way, except
   that the indentation is removed.

   It can span multiple lines.

This is a normal text paragraph again.
&lt;/pre&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;::&lt;/tt&gt; 标记是智能处置的:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;如果作为一个独立段落出现,则和其它文本完全隔离&lt;/li&gt;
&lt;li&gt;如果它紧跟有空格,则将被删除不起作用&lt;/li&gt;
&lt;li&gt;如果它在非空白字符之前,则替换为普通的单一冒号&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;综上,前述示例中的第二段代码引用文本之前的一句会渲染为 &amp;quot;The next paragraph is a code sample:&amp;quot;&lt;/p&gt;
&lt;p&gt;That way, the second sentence in the above example's first paragraph would be
rendered as &amp;quot;The next paragraph is a code sample:&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tables"&gt;
&lt;span id="rst-tables"&gt;&lt;/span&gt;&lt;h2&gt;表格 Tables&lt;/h2&gt;
&lt;p&gt;支持两种表格.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;网格表&lt;/strong&gt; (:&lt;cite&gt;参考 &amp;lt;grid-tables&amp;gt;&lt;/cite&gt;),
你不得不自行&amp;quot;绘制&amp;quot;表格的边框.看起来象这样:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
+------------------------+------------+----------+----------+
| Header row, column 1   | Header 2   | Header 3 | Header 4 |
| (header rows optional) |            |          |          |
+========================+============+==========+==========+
| body row 1, column 1   | column 2   | column 3 | column 4 |
+------------------------+------------+----------+----------+
| body row 2             | ...        | ...      |          |
+------------------------+------------+----------+----------+
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;简单表&lt;/strong&gt; (:&lt;cite&gt;参考 &amp;lt;simple-tables&amp;gt;&lt;/cite&gt;) 容易点,&lt;/p&gt;
&lt;p&gt;但是有限制:至少要有一列,而且,第一行不能包含多行文本,
看起来象这样:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
=====  =====  =======
A      B      A and B
=====  =====  =======
False  False  False
True   False  False
False  True   False
True   True   True
=====  =====  =======
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="hyperlinks"&gt;
&lt;h2&gt;超链接 Hyperlinks&lt;/h2&gt;
&lt;div class="section" id="external-links"&gt;
&lt;h3&gt;外部链接 External links&lt;/h3&gt;
&lt;p&gt;Use &lt;tt class="docutils literal"&gt;`Link text &lt;span class="pre"&gt;&amp;lt;http://example.com/&amp;gt;`_&lt;/span&gt;&lt;/tt&gt; for inline web links.  If the link
text should be the web address, you don't need special markup at all, the parser
finds links and mail addresses in ordinary text.&lt;/p&gt;
&lt;p&gt;用 &lt;tt class="docutils literal"&gt;`Link text &lt;span class="pre"&gt;&amp;lt;http://example.com/&amp;gt;`_&lt;/span&gt;&lt;/tt&gt; 来记录行内链接.
如果文字本身就是链接,
那不用作任何标记,解析器可以自动将链接和邮箱地址转换为超链接.&lt;/p&gt;
&lt;p&gt;也可以单独定义链接目标用引用(:&lt;cite&gt;参考 &amp;lt;hyperlink-targets&amp;gt;&lt;/cite&gt;),比如:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
This is a paragraph that contains `a link`_.

.. _a link: http://example.com/
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="internal-links"&gt;
&lt;h3&gt;内部链接 Internal links&lt;/h3&gt;
&lt;p&gt;Internal linking is done via a special reST role provided by Sphinx, see the
section on specific markup, &lt;cite&gt;ref-role&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;Sphinx 使用特殊 reST 规则支持内部链接,
详细参考 &lt;cite&gt;定义规则 &amp;lt;Mref-role&amp;gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="sections"&gt;
&lt;h2&gt;章节 Sections&lt;/h2&gt;
&lt;p&gt;Section headers (:&lt;cite&gt;ref &amp;lt;sections&amp;gt;&lt;/cite&gt;) are created by underlining (and
optionally overlining) the section title with a punctuation character, at least
as long as the text&lt;/p&gt;
&lt;p&gt;章节头部 (:&lt;cite&gt;参考 &amp;lt;sections&amp;gt;&lt;/cite&gt;)
由下线(也可有上线)和包含标点的标题 组合创建,
其中下线要至少等于标准文本的长度:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
=================
This is a heading
=================
&lt;/pre&gt;
&lt;div class="sidebar"&gt;
&lt;p class="first sidebar-title"&gt;注意&lt;/p&gt;
&lt;p class="sidebar-subtitle"&gt;中文标题的问题&lt;/p&gt;
&lt;p class="last"&gt;在多数编辑器中,全角/半角中文/标点和E文字符的长度是完全没谱的,
所以,多数情况下,为保持一致性,译者建议统一使用固定长度的上下标线;
比如说78.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Normally, there are no heading levels assigned to certain characters as the
structure is determined from the succession of headings.  However, for the
Python documentation, this convention is used which you may follow:
通常并没有对标题的层级指定明确的标线字符.
不过,对于 Pyhton 文档,可以使用如下约定:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;#&lt;/tt&gt; 有上标线, 用以部分&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;*&lt;/tt&gt; 有上标线, 用以章节&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;=&lt;/tt&gt;, 用以小节&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;-&lt;/tt&gt;, 用以子节&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;^&lt;/tt&gt;, 用以子节的子节&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&amp;quot;&lt;/tt&gt;, 用以段落&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course, you are free to use your own marker characters (see the reST
documentation), and use a deeper nesting level, but keep in mind that most
target formats (HTML, LaTeX) have a limited supported nesting depth.&lt;/p&gt;
&lt;p&gt;当然,你可以自由的使用你自定的标识字符(参考 reST 文档),
并使用更加深的嵌套层次,
不过,考虑到兼容多种输出格式(HTML, LaTeX) 最好限制嵌套的深度.&lt;/p&gt;
&lt;div class="sidebar"&gt;
&lt;p class="first sidebar-title"&gt;提示&lt;/p&gt;
&lt;p class="sidebar-subtitle"&gt;标题层次体验&lt;/p&gt;
&lt;p class="last"&gt;从行文来说,结构化文本组织的文章,更加关注局部文本的结构清晰,
以整个图书来说,不建议设定太多的标题级别,一般而言**四级**足够了.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="explicit-markup"&gt;
&lt;h2&gt;直解标记 Explicit Markup&lt;/h2&gt;
&lt;p&gt;&amp;quot;Explicit markup&amp;quot; (:&lt;cite&gt;ref &amp;lt;explicit-markup-blocks&amp;gt;&lt;/cite&gt;) is used in reST for
most constructs that need special handling, such as footnotes,
specially-highlighted paragraphs, comments, and generic directives.&lt;/p&gt;
&lt;p&gt;&amp;quot;直解标记&amp;quot; (Explicit markup, :&lt;cite&gt;参考 &amp;lt;explicit-markup-blocks&amp;gt;&lt;/cite&gt;)
用以 reST 中需要特殊处理的各种内容,
如脚注,特殊高亮段落,注释,以及通用指令.&lt;/p&gt;
&lt;p&gt;An explicit markup block begins with a line starting with &lt;tt class="docutils literal"&gt;..&lt;/tt&gt; followed by
whitespace and is terminated by the next paragraph at the same level of
indentation.  (There needs to be a blank line between explicit markup and normal
paragraphs.  This may all sound a bit complicated, but it is intuitive enough
when you write it.)&lt;/p&gt;
&lt;p&gt;直解标记块由``..``开始,紧后跟空格以及跟随的同缩进的文本块.
(和正文间要有空白行来明确的加以区分.
可能听起来有点复杂,但当你书写时就能直观的体验到)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="directives-1"&gt;
&lt;span id="directives"&gt;&lt;/span&gt;&lt;h2&gt;指令 Directives&lt;/h2&gt;
&lt;p&gt;A directive (:&lt;cite&gt;ref &amp;lt;directives&amp;gt;&lt;/cite&gt;) is a generic block of explicit markup.
指令(:&lt;cite&gt;ref &amp;lt;directives&amp;gt;&lt;/cite&gt;)就是一个标准的明确标记(Explicit Markup)块.
Besides roles, it is one of the extension mechanisms of reST, and Sphinx makes
heavy use of it.
除了规则,它是reST 的又一个扩展机制,
Sphinx 大量使用了指令.&lt;/p&gt;
&lt;p&gt;Docutils 支持以下指令:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;警示 Admonitions: &lt;cite&gt;attention&lt;/cite&gt;, &lt;cite&gt;caution&lt;/cite&gt;, &lt;cite&gt;danger&lt;/cite&gt;,
&lt;cite&gt;error&lt;/cite&gt;, &lt;cite&gt;hint&lt;/cite&gt;, &lt;cite&gt;important&lt;/cite&gt;, &lt;cite&gt;note&lt;/cite&gt;,
&lt;cite&gt;tip&lt;/cite&gt;, &lt;cite&gt;warning&lt;/cite&gt; and the generic &lt;cite&gt;admonition&lt;/cite&gt;.
(多数样式目前仅支持 &amp;quot;note&amp;quot; 和 &amp;quot;warning&amp;quot; &lt;sup&gt;好在都有针对的对象ID,很容易使用CSS进行定制&lt;/sup&gt; .)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;图像 Images:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;cite&gt;image&lt;/cite&gt;&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;figure&lt;/cite&gt; (配有标题和图例 的图片)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;其它行文元素 Additional body elements:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;cite&gt;contents&lt;/cite&gt; (对诸如 本地文件 的内容表单)&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;container&lt;/cite&gt; (配有定制 class 的容器,以便生成HTML 中的 &lt;tt class="docutils literal"&gt;&amp;lt;div&amp;gt;&lt;/tt&gt; )&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;rubric&lt;/cite&gt; (没有到相对段落关系的标题 a heading without relation to the document sectioning)&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;topic&lt;/cite&gt;, &lt;cite&gt;sidebar&lt;/cite&gt; (特殊高亮的正文元素 special highlighted body elements)&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;parsed-literal&lt;/cite&gt; (支持内嵌标记的文本块)&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;epigraph&lt;/cite&gt; (有可选归属行的引用文本块)&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;highlights&lt;/cite&gt;, &lt;cite&gt;pull-quote&lt;/cite&gt; (有他们自己class属性的文本块)&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;compound&lt;/cite&gt; (复合段落)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;特殊表格 Special tables:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;cite&gt;table&lt;/cite&gt; (有标题的表格)&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;csv-table&lt;/cite&gt; (从csv数据生成的表格)&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;list-table&lt;/cite&gt; (从列表数据生成的表格)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;特殊指令 Special directives:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;cite&gt;raw&lt;/cite&gt; (包括原始文本的目标格式标记 include raw target-format markup)&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;include&lt;/cite&gt; (从其它文件引入 reST )
-- 在Sphinx, 当给定包含文件的绝对路径时,指令会从源代码目录为起点进行相对路径查找.&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;class&lt;/cite&gt; (将 class 属性绑定到下一个元素) &lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[1]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;HTML 专用 specifics:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;cite&gt;meta&lt;/cite&gt; (生成 HTML 中的 &lt;tt class="docutils literal"&gt;&amp;lt;meta&amp;gt;&lt;/tt&gt; 标签)&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;title&lt;/cite&gt; (覆盖文件标题)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;影响标记 Influencing markup:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;cite&gt;default-role&lt;/cite&gt; (设置新默认规则)&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;role&lt;/cite&gt; (创建新规则)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于这些指令都只能作用到单一文件,所以,更好的使用 Sphinx 的方式是设置 &lt;cite&gt;default_role&lt;/cite&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;不要&lt;/em&gt; 使用指令 &lt;cite&gt;sectnum&lt;/cite&gt;, &lt;cite&gt;header&lt;/cite&gt; 和 &lt;cite&gt;footer&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;Sphinx 增加的指令描述收集在:  &lt;cite&gt;sphinxmarkup&lt;/cite&gt; .&lt;/p&gt;
&lt;p&gt;Basically, a directive consists of a name, arguments, options and content. (Keep
this terminology in mind, it is used in the next chapter describing custom
directives.)  Looking at this example,
基本上一个指令由名称,参数,选项和内容组成.
(请记住这里提及的几个术语,
它们将在之后章节描述自定义指令)
从这个例子来看,:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. function:: foo(x)
              foo(y, z)
   :module: some.module.name

   Return a line of text input from the user.
&lt;/pre&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;function&lt;/tt&gt; 是指令名,
在头两行里给出了两个参数,
紧接着给出了一个 &lt;tt class="docutils literal"&gt;module&lt;/tt&gt; 选项
(正如你所见,由冒号标明的 &lt;tt class="docutils literal"&gt;module&lt;/tt&gt; 之后立即跟上参数)
选项​​必须缩进和指令内容有相同的缩进.&lt;/p&gt;
&lt;!-- The directive content follows after a blank line and is indented relative to the directive start. --&gt;
&lt;p&gt;该指令的内容则是由一个空行和同样的缩进来接上.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="images"&gt;
&lt;h2&gt;图片 Images&lt;/h2&gt;
&lt;p&gt;reST 支持图片指令 (&lt;cite&gt;ref &amp;lt;image&amp;gt;&lt;/cite&gt;), 这样使用:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. image:: gnu.png
   (options)
&lt;/pre&gt;
&lt;p&gt;在Sphinx 中使用时,
给入的文件名 (此处是 &lt;tt class="docutils literal"&gt;gnu.png&lt;/tt&gt;) 必须是相对源文件目录的路径,
如果给的是绝对路径形式,也意味着对源文件顶层目录进行相对查找.
比如说, 文件 &lt;tt class="docutils literal"&gt;sketch/spam.rst&lt;/tt&gt; 可以用路径 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;../images/spam.png&lt;/span&gt;&lt;/tt&gt; 或 &lt;tt class="docutils literal"&gt;/images/spam.png&lt;/tt&gt;.
来引用图片 &lt;tt class="docutils literal"&gt;images/spam.png&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Sphinx will automatically copy image files over to a subdirectory of the output
directory on building (e.g. the &lt;tt class="docutils literal"&gt;_static&lt;/tt&gt; directory for HTML output.)
Sphinx 会自动将图片复制到构筑输出目录中的相关子目录
(e.g. HTML输出时的 &lt;tt class="docutils literal"&gt;_static&lt;/tt&gt; 目录.)&lt;/p&gt;
&lt;p&gt;Interpretation of image size options (&lt;tt class="docutils literal"&gt;width&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;height&lt;/tt&gt;) is as follows:
if the size has no unit or the unit is pixels, the given size will only be
respected for output channels that support pixels (i.e. not in LaTeX output).
Other units (like &lt;tt class="docutils literal"&gt;pt&lt;/tt&gt; for points) will be used for HTML and LaTeX output.&lt;/p&gt;
&lt;p&gt;图片尺寸的解释选项 (&lt;tt class="docutils literal"&gt;width&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;height&lt;/tt&gt;)有如下规约:
如果大小没给任何单位或单位是像素,
输出通道优先使用像素(换言之,非LaTeX输出).
其他单位(如 &lt;tt class="docutils literal"&gt;pt&lt;/tt&gt; 或是 点) 将被用于HTML和LaTeX输出.&lt;/p&gt;
&lt;p&gt;Sphinx extends the standard docutils behavior by allowing an asterisk for the
extension
Sphinx 扩展了标准 docutils 行为,支持如下的星号指代:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. image:: gnu.*
&lt;/pre&gt;
&lt;p&gt;Sphinx then searches for all images matching the provided pattern and determines
their type.  Each builder then chooses the best image out of these candidates.
For instance, if the file name &lt;tt class="docutils literal"&gt;gnu.*&lt;/tt&gt; was given and two files &lt;cite&gt;gnu.pdf&lt;/cite&gt;
and &lt;cite&gt;gnu.png&lt;/cite&gt; existed in the source tree, the LaTeX builder would choose
the former, while the HTML builder would prefer the latter.
Sphinx 会搜索所有匹配所提供模式的图片,
并确定它们的类型.
每个构筑器再从中选择最佳的图片.
例如,
如果给定文件名是 &lt;tt class="docutils literal"&gt;gnu.*&lt;/tt&gt; ,
源代码树中有两个文件 &lt;cite&gt;gnu.pdf&lt;/cite&gt; 和 &lt;cite&gt;gnu.png&lt;/cite&gt; ,
LaTeX 构筑器会选择前者,
HTML 构筑器更倾向于后者.&lt;/p&gt;
&lt;!-- :: 0.4
增加了文件名的星号后缀支持. --&gt;
&lt;!-- :: 0.6
开始支持绝对路径的图片 --&gt;
&lt;/div&gt;
&lt;div class="section" id="footnotes"&gt;
&lt;h2&gt;脚注  Footnotes&lt;/h2&gt;
&lt;p&gt;and add the footnote body at the bottom of the document after a
&amp;quot;Footnotes&amp;quot; rubric heading, like so::
脚注 (:&lt;cite&gt;参考 &amp;lt;footnotes&amp;gt;&lt;/cite&gt;), 使用 &lt;tt class="docutils literal"&gt;[#name]_&lt;/tt&gt; 来标记位置,
并在文章底部 &amp;quot;Footnotes&amp;quot; 专栏之后追加脚注内容,如下使用:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Lorem ipsum [#f1]_ dolor sit amet ... [#f2]_

.. rubric:: Footnotes

.. [#f1] Text of the first footnote.
.. [#f2] Text of the second footnote.
&lt;/pre&gt;
&lt;p&gt;You can also explicitly number the footnotes (&lt;tt class="docutils literal"&gt;[1]_&lt;/tt&gt;) or use auto-numbered
footnotes without names (&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[#]_&lt;/span&gt;&lt;/tt&gt;).
可以使用确切编号的脚注 (如: &lt;tt class="docutils literal"&gt;[1]_&lt;/tt&gt;)
或是自动编号(用 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;[#]_&lt;/span&gt;&lt;/tt&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="citations"&gt;
&lt;h2&gt;引证 Citations&lt;/h2&gt;
&lt;p&gt;标准 reST 支持引证 (:&lt;cite&gt;参考 &amp;lt;citations&amp;gt;&lt;/cite&gt;) ,
with the
additional feature that they are &amp;quot;global&amp;quot;, i.e. all citations can be referenced
from all files.  Use them like so::
有额外的功能是 &amp;quot;global&amp;quot;,
换言之,引证能从所有文件来引用.
这样使用:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Lorem ipsum [Ref]_ dolor sit amet.

.. [Ref] Book or article reference, URL or whatever.
&lt;/pre&gt;
&lt;p&gt;Citation usage is similar to footnote usage, but with a label that is not
numeric or begins with &lt;tt class="docutils literal"&gt;#&lt;/tt&gt;.
引证 的使用基本和脚注相同,
不过使用的标签不是数字或是以 &lt;tt class="docutils literal"&gt;#&lt;/tt&gt; 开始.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="substitutions"&gt;
&lt;h2&gt;替换 Substitutions&lt;/h2&gt;
&lt;p&gt;reST 支持 &amp;quot;替换&amp;quot; (:&lt;cite&gt;参考 &amp;lt;substitution-definitions&amp;gt;&lt;/cite&gt;),
以 &lt;tt class="docutils literal"&gt;|name|&lt;/tt&gt; 形式来定义替换的文本或是标记对象.
如脚注,可以在直解标记文本块中声明,形如:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. |name| replace:: replacement *text*
&lt;/pre&gt;
&lt;p&gt;或是:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. |caution| image:: warning.png
             :alt: Warning!
&lt;/pre&gt;
&lt;p&gt;详参 :&lt;cite&gt;reST 替换参考 &amp;lt;substitution-definitions&amp;gt;&lt;/cite&gt; .&lt;/p&gt;
&lt;p&gt;If you want to use some substitutions for all documents, put them into
&lt;cite&gt;rst_prolog&lt;/cite&gt; or put them into a separate file and include it into all
documents you want to use them in, using the &lt;cite&gt;include&lt;/cite&gt; directive.  (Be
sure to give the include file a file name extension differing from that of other
source files, to avoid Sphinx finding it as a standalone document.)&lt;/p&gt;
&lt;p&gt;如果你对所有文件使用一组替换,
把它们置入 &lt;cite&gt;rst_prolog&lt;/cite&gt; 或放入一个单独的文件,
并在所有相关文件中使用 &lt;cite&gt;incluse&lt;/cite&gt; 指令引入,
(请将此定义文件,使用和内容文件不同的后缀,否则,Sphinx 将视其为独立文章来尝试解析)&lt;/p&gt;
&lt;p&gt;Sphinx defines some default substitutions, see &lt;cite&gt;default-substitutions&lt;/cite&gt;.
Sphinx 本身有些默认替换,参考 &lt;cite&gt;default-substitutions&lt;/cite&gt; .&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="comments"&gt;
&lt;h2&gt;注释  Comments&lt;/h2&gt;
&lt;p&gt;所有直解标记文本块都不算有效的标记构成
Every explicit markup block which isn't a valid markup construct (like the
footnotes above) is regarded as a comment (:&lt;cite&gt;ref &amp;lt;comments&amp;gt;&lt;/cite&gt;).  For
example&lt;/p&gt;
&lt;p&gt;没有有效标记(如脚注)的直解标记文本块就是注释(:&lt;cite&gt;参考 &amp;lt;comments&amp;gt;&lt;/cite&gt;)
例如:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. This is a comment.
&lt;/pre&gt;
&lt;p&gt;可以用缩进文本来进行多行注释:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
..
   This whole indented block
   is a comment.

   Still in the comment.
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="source-encoding"&gt;
&lt;h2&gt;源文本编码 Source encoding&lt;/h2&gt;
&lt;p&gt;Since the easiest way to include special characters like em dashes or copyright
signs in reST is to directly write them as Unicode characters, one has to
specify an encoding.  Sphinx assumes source files to be encoded in UTF-8 by
default; you can change this with the &lt;cite&gt;source_encoding&lt;/cite&gt; config value.&lt;/p&gt;
&lt;p&gt;由于最简单的方式,是在 reST 中将包括特殊字符(如长划线或版权标记)都直接写成Unicode字符.
Sphinx 默认假设源文件是 utf-8 编码.
你可以用配置项 &lt;cite&gt;source_encoding&lt;/cite&gt; 来指定别的编码.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="gotchas"&gt;
&lt;h2&gt;嗯嗯嗯 Gotchas&lt;/h2&gt;
&lt;p&gt;There are some problems one commonly runs into while authoring reST documents:
通常运用 reST 进行撰写时会遇见几个问题:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;对在线标记的分隔:&lt;/strong&gt; 如前所述,内联标记必须用非单词字符和周围的文字进行区隔,
要解决这个问题你必须使用反斜杠转义空格,详见 &lt;a class="reference external" href="http://docutils.sf.net/docs/ref/rst/restructuredtext.html#inline-markup"&gt;参考&lt;/a&gt; .&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在线标记不能嵌套:&lt;/strong&gt; 但是形如 &lt;tt class="docutils literal"&gt;*see &lt;span class="pre"&gt;:func:`foo`*&lt;/span&gt;&lt;/tt&gt; 是没问题的.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class="rubric"&gt;Footnotes&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-1" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;当默认域包含 &lt;cite&gt;class&lt;/cite&gt; 指令时,该指令将被掩蔽,
因此 Sphinx 转而使用 &lt;cite&gt;rst-class&lt;/cite&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="Reference"></category><category term="reStructuredText"></category><category term="sphinx"></category><category term="rest"></category></entry></feed>