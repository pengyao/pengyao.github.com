<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PengYao's Weblog - pengyao</title><link>https://pengyao.org/</link><description></description><lastBuildDate>Tue, 27 Jan 2015 00:00:00 +0800</lastBuildDate><item><title>Salt zmq_filtering测试</title><link>https://pengyao.org/salt-zmq-filtering.html</link><description>&lt;p class="first last"&gt;Salt 2014.7新增了zmq_filtering配置项, 利用zeromq PUB/SUB Envelopes技术, 可以实现消息只发送到target minion(目前只支持list target)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pengyao</dc:creator><pubDate>Tue, 27 Jan 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:pengyao.org,2015-01-27:/salt-zmq-filtering.html</guid><category>SaltStack</category><category>saltstack</category><category>zeromq</category><category>zmq_filtering</category><category>envelopes</category></item><item><title>显示Salt进程具体名称</title><link>https://pengyao.org/howto-display-salt-process-name.html</link><description>&lt;p class="first last"&gt;&lt;a class="reference external" href="http://saltstack.com/"&gt;Salt&lt;/a&gt; 当前已经支持显示具体的进程名, 只需要安装 &lt;a class="reference external" href="https://pypi.python.org/pypi/setproctitle"&gt;setproctitle&lt;/a&gt; 重启后即可显示Salt进程的具体名称, 便于Debug&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pengyao</dc:creator><pubDate>Thu, 08 Jan 2015 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:pengyao.org,2015-01-08:/howto-display-salt-process-name.html</guid><category>SaltStack</category><category>saltstack</category><category>process</category><category>进程名</category></item><item><title>基于Salt管理iptables防火墙规则</title><link>https://pengyao.org/managing-firewall-with-salt.html</link><description>&lt;p class="first last"&gt;Salt 2014.7支持pillar merge功能, 尝试基于此完成统一的iptables防火墙规则的管理&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pengyao</dc:creator><pubDate>Wed, 17 Dec 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:pengyao.org,2014-12-17:/managing-firewall-with-salt.html</guid><category>SaltStack</category><category>Salt</category><category>saltstack</category><category>iptables</category><category>state</category><category>防火墙</category></item><item><title>Salt Master外部Job Cache配置</title><link>https://pengyao.org/saltstack-master-external-job-cache.html</link><description>&lt;p class="first last"&gt;SaltStack 2014.7.0对master端的job_cache进行了扩展,可以轻松配置将job执行结果存储到外部系统中.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pengyao</dc:creator><pubDate>Thu, 20 Nov 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:pengyao.org,2014-11-20:/saltstack-master-external-job-cache.html</guid><category>SaltStack</category><category>saltstack</category><category>returner</category><category>master</category><category>master_job_cache</category></item><item><title>salt-broker: 轻量级的Salt Proxy解决方案</title><link>https://pengyao.org/salt-broker-01.html</link><description>&lt;p class="first last"&gt;当前运维系统底层采用 &lt;a class="reference external" href="https://github.com/saltstack/salt"&gt;Salt&lt;/a&gt; 进行实现, 由于节点分布在全国各地, 存在南北通畅问题, 为了解决这个问题, 之前采用了 &lt;a class="reference external" href="http://docs.saltstack.com/en/latest/topics/topology/syndic.html"&gt;Syndic&lt;/a&gt; 方案, 在实际使用中发现由于Syndic采用分治机制, 弱化了MasterOfMaster, 在某些网络状况较差的情况下, 会让结果变得不可控. 为了解决该问题, 借鉴ZeroMQ文档, 开发了轻量的Salt Proxy解决方案 &lt;a class="reference external" href="https://github.com/pengyao/salt-broker"&gt;salt-broker&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pengyao</dc:creator><pubDate>Sun, 07 Sep 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:pengyao.org,2014-09-07:/salt-broker-01.html</guid><category>SaltStack</category><category>saltstack</category><category>zeromq</category><category>syndic</category><category>salt-broker</category></item><item><title>Salt中Syndic那点事</title><link>https://pengyao.org/salt-syndic-01.html</link><description>&lt;p class="first last"&gt;&lt;a class="reference external" href="https://github.com/saltstack/salt"&gt;Salt&lt;/a&gt; 在 &lt;a class="reference external" href="http://docs.saltstack.com/en/latest/topics/releases/0.9.0.html"&gt;0.9.0版本&lt;/a&gt; 中增加了 &lt;a class="reference external" href="http://docs.saltstack.com/en/latest/topics/topology/syndic.html"&gt;Syndic&lt;/a&gt; 特性. 通过Syndic, 可以快速构建出多层级的Salt拓扑, 使Salt变得更灵活. 那么Syndic是如何工作的? 当前有哪些优势和局限哪?&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pengyao</dc:creator><pubDate>Sun, 07 Sep 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:pengyao.org,2014-09-07:/salt-syndic-01.html</guid><category>SaltStack</category><category>saltstack</category><category>zeromq</category><category>syndic</category></item><item><title>Salt中ZeroMQ那点事</title><link>https://pengyao.org/salt-zeromq-01.html</link><description>&lt;p class="first last"&gt;&lt;a class="reference external" href="https://github.com/saltstack/salt"&gt;Salt&lt;/a&gt; 底层网络架构采用 &lt;a class="reference external" href="http://zeromq.org/"&gt;ZeroMQ&lt;/a&gt; 进行实现(2014.1及之前版本, 从2014.7起, Salt新增 &lt;a class="reference external" href="https://github.com/saltstack/raet"&gt;RAET&lt;/a&gt; ), 那么Salt都使用了ZeroMQ哪些模式? 各个组件间又是如何协作的?&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pengyao</dc:creator><pubDate>Sat, 06 Sep 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:pengyao.org,2014-09-06:/salt-zeromq-01.html</guid><category>SaltStack</category><category>saltstack</category><category>zeromq</category></item><item><title>Salt中Pillar那点事</title><link>https://pengyao.org/salt-pillar-01.html</link><description>&lt;p class="first last"&gt;在 &lt;a class="reference external" href="http://saltstack.com/"&gt;SaltStack&lt;/a&gt; 中, Pillar作为定义minion全局数据的接口. 那么在Salt内部, Pillar是如何工作的? 在哪些情况下, 使用Pillar需要先执行刷新操作? 而哪些又不需要?&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pengyao</dc:creator><pubDate>Sun, 08 Jun 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:pengyao.org,2014-06-08:/salt-pillar-01.html</guid><category>SaltStack</category><category>saltstack</category><category>pillar</category></item><item><title>基于Salt Event系统构建Master端returner</title><link>https://pengyao.org/saltstack_master_retuner_over_event_system.html</link><description>&lt;p class="first last"&gt;SaltStack的returner是由minion端主动连接returner完成执行结果的存储, 在部分场景下并不能满足需求. 由于Salt底层已经构建了一套Event系统, 所有的操作均会产生event. 因此基于Salt Event System构建Master端returner成为一种可能.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pengyao</dc:creator><pubDate>Fri, 18 Apr 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:pengyao.org,2014-04-18:/saltstack_master_retuner_over_event_system.html</guid><category>SaltStack</category><category>saltstack</category><category>event system</category><category>returner</category></item><item><title>SaltStack Event系统监听events测试</title><link>https://pengyao.org/saltstack_event_system_listen_events.html</link><description>&lt;p class="first last"&gt;SaltStack 0.10版本中, 基于ZeroMQ publish socket, 新增了Event系统, 允许其他进程连接该socket并监听event bus上的events. 本文对SaltStack Event系统进行监听events测试.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pengyao</dc:creator><pubDate>Thu, 17 Apr 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:pengyao.org,2014-04-17:/saltstack_event_system_listen_events.html</guid><category>SaltStack</category><category>saltstack</category><category>event system</category><category>event系统</category><category>监听events</category></item><item><title>ntpq peers字段说明</title><link>https://pengyao.org/ntpq-peers.html</link><description>&lt;p class="first last"&gt;服务器为了保持时间的统一, 经常会部署ntpd服务. 经常使用 &lt;tt class="docutils literal"&gt;ntpq &lt;span class="pre"&gt;-p&lt;/span&gt;&lt;/tt&gt; 来查看ntpd peers的运行状态信息, 但其输出中的各个字段是什么含义哪?&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pengyao</dc:creator><pubDate>Mon, 03 Mar 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:pengyao.org,2014-03-03:/ntpq-peers.html</guid><category>ntp</category><category>ntp</category><category>nptq</category><category>peers</category></item><item><title>Salt整合reclass测试</title><link>https://pengyao.org/reclass-salt-01.html</link><description>&lt;p class="first last"&gt;reclass是一个外部节点分类器(External Node Classifier, ENC), 可以与自动化管理工具如PUPPET, Salt及Ansible进行整合. 就对reclass进行下学习, 看能为Salt带来什么.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pengyao</dc:creator><pubDate>Mon, 17 Feb 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:pengyao.org,2014-02-17:/reclass-salt-01.html</guid><category>SaltStack</category><category>配置管理</category><category>ENC</category><category>reclass</category><category>saltstack</category></item><item><title>Salt配置复杂nodegroup</title><link>https://pengyao.org/salt-nodegroup-complex.html</link><description>&lt;p class="first last"&gt;&lt;a class="reference external" href="http://saltstack.com/"&gt;SaltStack&lt;/a&gt; 支持Nodegroup嵌套Nodegroup, 进而实现复杂Nodegroup&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pengyao</dc:creator><pubDate>Thu, 16 Jan 2014 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:pengyao.org,2014-01-16:/salt-nodegroup-complex.html</guid><category>SaltStack</category><category>saltstack</category><category>nodegroup</category></item><item><title>Tomcat Manager Text API测试</title><link>https://pengyao.org/tomcat-manager-text-api-test.html</link><description>&lt;p class="first last"&gt;Tomcat Manager提供应用的状态查询,部署,维护等功能. 同时提供有Text API接口,对其进行基本测试.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pengyao</dc:creator><pubDate>Thu, 26 Dec 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:pengyao.org,2013-12-26:/tomcat-manager-text-api-test.html</guid><category>WebServer</category><category>webserver</category><category>tomcat</category><category>manager</category><category>字符接口</category><category>api</category></item><item><title>CentOS平台上如何加入World Community Grid参与运算</title><link>https://pengyao.org/howto_join_world_community_grid_on_centos.html</link><description>&lt;p class="first last"&gt;&lt;a class="reference external" href="http://www.worldcommunitygrid.org/"&gt;World Community Grid&lt;/a&gt; 是一项基于互联网的公益性分布式计算项目，该项目联合分布在各地的自愿者们提供的计算资源，用于一些能够为全人类带来福音的大型科技研究项目。 当手头有CentOS操作系统的计算资源，安装上 &lt;a class="reference external" href="http://boinc.berkeley.edu/"&gt;Boinc&lt;/a&gt; client, 进行简单配置即可参与计算。&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pengyao</dc:creator><pubDate>Tue, 10 Dec 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:pengyao.org,2013-12-10:/howto_join_world_community_grid_on_centos.html</guid><category>Public_Welfare</category><category>CentOS</category><category>EPEL</category><category>World Community Grid</category><category>世界公共网格</category><category>boinc</category></item><item><title>Salt-API安装配置及使用</title><link>https://pengyao.org/salt-api-deploy-and-use.html</link><description>&lt;p class="first last"&gt;&lt;a class="reference external" href="http://saltstack.com/"&gt;SaltStack&lt;/a&gt; 官方提供有REST API格式的 &lt;a class="reference external" href="https://github.com/saltstack/salt-api"&gt;salt-api&lt;/a&gt; 项目, 与第三方系统集成将变得非常简单。 本文将讲述如何安装配置及使用Salt-API。&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pengyao</dc:creator><pubDate>Wed, 27 Nov 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:pengyao.org,2013-11-27:/salt-api-deploy-and-use.html</guid><category>SaltStack</category><category>saltstack</category><category>API</category><category>REST</category><category>salt-api</category><category>部署</category><category>安装配置</category><category>使用</category></item><item><title>基于SaltStack完成LVS的配置管理</title><link>https://pengyao.org/howto_configure_linux_virtual_server_using_saltstack.html</link><description>&lt;p class="first last"&gt;SaltStack最新代码中已经包含了对LVS(Linux Virutal Server)的支持, 本文将简要描述如何基于SaltStack完成LVS Loadblance(DR)及RealServer的配置管理&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pengyao</dc:creator><pubDate>Sun, 24 Nov 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:pengyao.org,2013-11-24:/howto_configure_linux_virtual_server_using_saltstack.html</guid><category>SaltStack</category><category>saltstack</category><category>howto</category><category>LVS</category><category>Linux Vritual Server</category><category>配置管理</category></item><item><title>基于Salt Master/Minions快速构建Salt SSH环境</title><link>https://pengyao.org/howto_setup_salt_ssh_from_minion.html</link><description>&lt;p class="first last"&gt;Salt 0.17版本重要的特性是引入了Salt SSH系统，本文基于已有的SaltStack Master/Minions环境,快速构建Salt SSH维护环境, 提供Salt多重维护方式.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pengyao</dc:creator><pubDate>Fri, 08 Nov 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:pengyao.org,2013-11-08:/howto_setup_salt_ssh_from_minion.html</guid><category>SaltStack</category><category>saltstack</category><category>salt-ssh</category><category>master/minion</category><category>howto</category><category>Salt SSH</category></item><item><title>【翻译】如何建立多Master的SaltStack环境</title><link>https://pengyao.org/howto_configure_a_multi_master_saltstack_setup.html</link><description>&lt;p class="first last"&gt;翻译的《How To Configure A Multi-Master SaltStack Setup》&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pengyao</dc:creator><pubDate>Wed, 25 Sep 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:pengyao.org,2013-09-25:/howto_configure_a_multi_master_saltstack_setup.html</guid><category>SaltStack</category><category>saltstack</category><category>multi-master</category><category>多master</category><category>howto</category></item><item><title>Salt Runners manage学习</title><link>https://pengyao.org/salt_runners_manage_01.html</link><description>&lt;p class="first last"&gt;参考手册和源码对Salt Runners manage进行学习&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pengyao</dc:creator><pubDate>Tue, 24 Sep 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:pengyao.org,2013-09-24:/salt_runners_manage_01.html</guid><category>SaltStack</category><category>saltstack</category><category>runners</category><category>manage</category><category>status</category></item><item><title>【翻译】在SaltStack中如何使用require及watch语法</title><link>https://pengyao.org/howto_to_use_require_and_watch_statements.html</link><description>&lt;p class="first last"&gt;翻译了intothesaltmine的《HOW TO USE REQUIRE AND WATCH STATEMENTS》，本文主要讲述在SaltStack中，如何使用require及watch语法来确定state间的依赖关系及执行顺序.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pengyao</dc:creator><pubDate>Wed, 18 Sep 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:pengyao.org,2013-09-18:/howto_to_use_require_and_watch_statements.html</guid><category>SaltStack</category><category>saltstack</category><category>require</category><category>watch</category><category>order</category></item><item><title>常见WebServer日志格式中请求处理时间汇总</title><link>https://pengyao.org/webserver-request-time-1.html</link><description>&lt;p class="first last"&gt;不同WebServer的日志格式中对于请求处理时间使用的关键字及单位是不相同的，对常用的WebServer进行汇总.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pengyao</dc:creator><pubDate>Wed, 15 May 2013 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:pengyao.org,2013-05-15:/webserver-request-time-1.html</guid><category>WebServer</category><category>request time</category><category>请求处理时间</category><category>webserver</category><category>nginx</category><category>apache</category><category>tomcat</category><category>resin</category><category>IIS</category></item><item><title>reStructuredText 入门</title><link>https://pengyao.org/rest-primer-chinese.html</link><description>&lt;p class="first last"&gt;转载的reStructuredText入门教程&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">pengyao</dc:creator><pubDate>Sun, 04 Jun 1989 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:pengyao.org,1989-06-04:/rest-primer-chinese.html</guid><category>Reference</category><category>reStructuredText</category><category>sphinx</category><category>rest</category></item></channel></rss>